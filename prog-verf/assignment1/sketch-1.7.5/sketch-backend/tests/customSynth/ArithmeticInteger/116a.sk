pragma options "--slv-timeout 4 --bnd-inbits 3 --bnd-cbits 3 --bnd-int-range 1000 --beopt:simplifycex NOSIM";
#define ARRSZ 5
//#define USEARRACC
//#define USEINT
//#define USEARR
#define MAXINT 100000
#define NSRC 4
#define NTOTALF 7
#define NBITS 2
#define NINTS 2
#define NBARRS 0
#define NIARRS 0
#define ARRSZMAX 50
#define CBITS 3
#define INPBITS 3
//(AND|(EQ|(EQ|N_3:INT|N_4:BOOL|)|N_3:INT|)|(EQ|N_1:INT|N_2:BOOL|)|)
#include "..//ast.skh"
//Hardcoded evaluation of d-dag
Val ddag(Val[NTOTALF] vals){
	return new BIT(b=(checkEq( (new BIT(b= checkEq( (vals[2]), (vals[3])))), (vals[2])) && checkEq( (vals[0]), (vals[1]))));
}
harness void prnotimply1(){
	int N_1 = ??(INPBITS);
	bit N_2 = ??(1);
	int N_3 = ??(INPBITS);
	bit N_4 = ??(1);
	assert( !pred( N_1, N_2, N_3, N_4) && ((N_2 <= N_3) && (N_3 <= 1)));
}
harness void prnotimply2(){
	int N_1 = ??(INPBITS);
	bit N_2 = ??(1);
	int N_3 = ??(INPBITS);
	bit N_4 = ??(1);
	assert( !pred( N_1, N_2, N_3, N_4) && ((N_2 <= N_3) && (N_3 <= N_4)));
}
harness void prnotimply3(){
	int N_1 = ??(INPBITS);
	bit N_2 = ??(1);
	int N_3 = ??(INPBITS);
	bit N_4 = ??(1);
	assert( !pred( N_1, N_2, N_3, N_4) && (N_4 && (N_3 <= 1)));
}
bit sC1(int N_1,bit N_2,int N_3,bit N_4){
	bit stat1 = ! N_2 && (N_1 >= 0 && N_1 <= 1) && (N_3 >= 0 && N_3 <= 1) && N_4;
	if(stat1){
		return (pred( N_1, N_2, N_3, N_4));
	}
	else{
		return true;
	}
}
harness void staticFinalCheck(int N_1_1,bit N_2_1,int N_3_1,bit N_4_1){
	N_1_1=N_1_1-3;
	N_3_1=N_3_1-3;
	assert(sC1( N_1_1, N_2_1, N_3_1, N_4_1));
}
bit pred(int N_1,bit N_2,int N_3,bit N_4){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	/*N_1=N_1-3;*/	vals[0] = new INT(N=N_1); SETINT(0) //N_1 INT
	vals[1] = new BIT(b=N_2); SETBIT(1) //N_2 BOOL
	/*N_3=N_3-3;*/	vals[2] = new INT(N=N_3); SETINT(2) //N_3 INT
	vals[3] = new BIT(b=N_4); SETBIT(3) //N_4 BOOL
	return predG(vals,isBit,isArr,2);
}
@Gen("arithexpr_4d_4v_not_neg_or_lt_and_xor_eq_plus_times_div_mod_c0_c1_c2")
bit arithExpr(int N_1,bit N_2,int N_3,bit N_4);
//harness specifying the synthesis constraints
harness void main(int N_1,bit N_2,int N_3,bit N_4){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	N_1=N_1-3;	vals[0] = new INT(N=N_1); SETINT(0) //N_1 INT
	vals[1] = new BIT(b=N_2); SETBIT(1) //N_2 BOOL
	N_3=N_3-3;	vals[2] = new INT(N=N_3); SETINT(2) //N_3 INT
	vals[3] = new BIT(b=N_4); SETBIT(3) //N_4 BOOL
	if(pred( N_1, N_2, N_3, N_4)){
Val VAE = new BIT(b=arithExpr( N_1, N_2, N_3, N_4));
assert(checkEq(VAE,ddag(vals)));
	}
}
