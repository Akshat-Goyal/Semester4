pragma options "--slv-timeout 4 --bnd-inbits 3 --bnd-cbits 3 --bnd-int-range 1000 --beopt:simplifycex NOSIM";
#define ARRSZ 5
//#define USEARRACC
//#define USEINT
//#define USEARR
#define MAXINT 100000
#define NSRC 3
#define NTOTALF 6
#define NBITS 3
#define NINTS 0
#define NBARRS 0
#define NIARRS 0
#define ARRSZMAX 50
#define CBITS 3
#define INPBITS 3
//(NOT|(AND|(NOT|(XOR|N_1:BOOL|N_2:BOOL|)|)|N_3:BOOL|)|)
#include "..//ast.skh"
//Hardcoded evaluation of d-dag
Val ddag(Val[NTOTALF] vals){
	return new BIT(b=(! ((! (getBit(vals[0]) ^ getBit(vals[1]))) && getBit(vals[2]))));
}
bit sC1(bit N_1,bit N_2,bit N_3){
	return (pred( N_1, N_2, N_3));
}
harness void staticFinalCheck(bit N_1_1,bit N_2_1,bit N_3_1){
	assert(sC1( N_1_1, N_2_1, N_3_1));
}
bit pred(bit N_1,bit N_2,bit N_3){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	vals[0] = new BIT(b=N_1); SETBIT(0) //N_1 BOOL
	vals[1] = new BIT(b=N_2); SETBIT(1) //N_2 BOOL
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	return predG(vals,isBit,isArr,2);
}
@Gen("arithexpr_4d_3v_not_neg_or_lt_and_xor_eq_plus_times_div_mod_c0_c1_c2")
bit arithExpr(bit N_1,bit N_2,bit N_3);
//harness specifying the synthesis constraints
harness void main(bit N_1,bit N_2,bit N_3){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	vals[0] = new BIT(b=N_1); SETBIT(0) //N_1 BOOL
	vals[1] = new BIT(b=N_2); SETBIT(1) //N_2 BOOL
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	if(pred( N_1, N_2, N_3)){
Val VAE = new BIT(b=arithExpr( N_1, N_2, N_3));
assert(checkEq(VAE,ddag(vals)));
	}
}