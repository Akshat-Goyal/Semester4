pragma options "--slv-timeout 9 --bnd-inbits 3 --bnd-cbits 3 --bnd-int-range 1000 --beopt:simplifycex NOSIM";
#define ARRSZ 5
//#define USEARRACC
#define USEINT
//#define USEARR
#define MAXINT 100000
#define NSRC 6
#define NTOTALF 10
#define NBITS 4
#define NINTS 2
#define NBARRS 0
#define NIARRS 0
#define ARRSZMAX 50
#define CBITS 4
#define INPBITS 3
//(TIMES|(AND|(AND|(EQ|N_1:BOOL|N_2:INT|)|N_3:BOOL|)|N_4:BOOL|)|(TIMES|N_5:BOOL|N_6:INT|)|)
#include "..//ast.skh"
//Hardcoded evaluation of d-dag
Val ddag(Val[NTOTALF] vals){
	return new INT(N=(((int)((checkEq( (vals[0]), (vals[1])) && getBit(vals[2])) && getBit(vals[3]))) * (getIntUpCast(vals[4]) * getIntUpCast(vals[5]))));
}
bit sC1(bit N_1,int N_2,bit N_3,bit N_4,bit N_5,int N_6){
	bit stat1 = (N_2 >= 0 && N_2 <= 1);
	if(stat1){
		return (pred( N_1, N_2, N_3, N_4, N_5, N_6));
	}
	else{
		return true;
	}
}
harness void staticFinalCheck(bit N_1_1,int N_2_1,bit N_3_1,bit N_4_1,bit N_5_1,int N_6_1){
	N_2_1=N_2_1-3;
	N_6_1=N_6_1-3;
	assert(sC1( N_1_1, N_2_1, N_3_1, N_4_1, N_5_1, N_6_1));
}
bit pred(bit N_1,int N_2,bit N_3,bit N_4,bit N_5,int N_6){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	vals[0] = new BIT(b=N_1); SETBIT(0) //N_1 BOOL
	/*N_2=N_2-3;*/	vals[1] = new INT(N=N_2); SETINT(1) //N_2 INT
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	vals[3] = new BIT(b=N_4); SETBIT(3) //N_4 BOOL
	vals[4] = new BIT(b=N_5); SETBIT(4) //N_5 BOOL
	/*N_6=N_6-3;*/	vals[5] = new INT(N=N_6); SETINT(5) //N_6 INT
	return predG(vals,isBit,isArr,2);
}
@Gen("arithexpr_5d_6v_4n_b_i_b_b_b_i_not_and_or_xor_lt_eq_neg_plus_times_div_mod_c0_c1_c2_outi")
int arithExpr(bit N_1,int N_2,bit N_3,bit N_4,bit N_5,int N_6);
//harness specifying the synthesis constraints
harness void main(bit N_1,int N_2,bit N_3,bit N_4,bit N_5,int N_6){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	vals[0] = new BIT(b=N_1); SETBIT(0) //N_1 BOOL
	N_2=N_2-3;	vals[1] = new INT(N=N_2); SETINT(1) //N_2 INT
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	vals[3] = new BIT(b=N_4); SETBIT(3) //N_4 BOOL
	vals[4] = new BIT(b=N_5); SETBIT(4) //N_5 BOOL
	N_6=N_6-3;	vals[5] = new INT(N=N_6); SETINT(5) //N_6 INT
	if(pred( N_1, N_2, N_3, N_4, N_5, N_6)){
Val VAE = new INT(N=arithExpr( N_1, N_2, N_3, N_4, N_5, N_6));
assert(checkEq(VAE,ddag(vals)));
	}
}