pragma options "--slv-timeout 9 --bnd-inbits 3 --bnd-cbits 3 --bnd-int-range 1000 --beopt:simplifycex NOSIM";
#define ARRSZ 5
//#define USEARRACC
#define USEINT
//#define USEARR
#define MAXINT 100000
#define NSRC 5
#define NTOTALF 8
#define NBITS 3
#define NINTS 2
#define NBARRS 0
#define NIARRS 0
#define ARRSZMAX 50
#define CBITS 3
#define INPBITS 3
//(TIMES|(AND|(LT|(TIMES|N_4:BOOL|N_5:INT|)|N_5:INT|)|N_3:BOOL|)|(TIMES|N_1:INT|N_2:BOOL|)|)
#include "..//ast.skh"
//Hardcoded evaluation of d-dag
Val ddag(Val[NTOTALF] vals){
	return new INT(N=(((int)(((getIntUpCast(vals[3]) * getIntUpCast(vals[4])) < getIntUpCast(vals[4])) && getBit(vals[2]))) * (getIntUpCast(vals[0]) * getIntUpCast(vals[1]))));
}
bit sC1(int N_1,bit N_2,bit N_3,bit N_4,int N_5){
	bit stat1 = (N_1 >= 0 && N_1 <= 1);
	if(stat1){
		return (pred( N_1, N_2, N_3, N_4, N_5));
	}
	else{
		return true;
	}
}
harness void staticFinalCheck(int N_1_1,bit N_2_1,bit N_3_1,bit N_4_1,int N_5_1){
	N_1_1=N_1_1-3;
	N_5_1=N_5_1-3;
	assert(sC1( N_1_1, N_2_1, N_3_1, N_4_1, N_5_1));
}
bit pred(int N_1,bit N_2,bit N_3,bit N_4,int N_5){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	/*N_1=N_1-3;*/	vals[0] = new INT(N=N_1); SETINT(0) //N_1 INT
	vals[1] = new BIT(b=N_2); SETBIT(1) //N_2 BOOL
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	vals[3] = new BIT(b=N_4); SETBIT(3) //N_4 BOOL
	/*N_5=N_5-3;*/	vals[4] = new INT(N=N_5); SETINT(4) //N_5 INT
	return predG(vals,isBit,isArr,2);
}
@Gen("arithexpr_4d_5v_3n_i_b_b_b_i_not_and_or_xor_lt_eq_neg_plus_times_div_mod_c0_c1_c2_outi")
int arithExpr(int N_1,bit N_2,bit N_3,bit N_4,int N_5);
//harness specifying the synthesis constraints
harness void main(int N_1,bit N_2,bit N_3,bit N_4,int N_5){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	N_1=N_1-3;	vals[0] = new INT(N=N_1); SETINT(0) //N_1 INT
	vals[1] = new BIT(b=N_2); SETBIT(1) //N_2 BOOL
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	vals[3] = new BIT(b=N_4); SETBIT(3) //N_4 BOOL
	N_5=N_5-3;	vals[4] = new INT(N=N_5); SETINT(4) //N_5 INT
	if(pred( N_1, N_2, N_3, N_4, N_5)){
Val VAE = new INT(N=arithExpr( N_1, N_2, N_3, N_4, N_5));
assert(checkEq(VAE,ddag(vals)));
	}
}