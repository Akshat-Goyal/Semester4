pragma options "--slv-timeout 9 --bnd-inbits 3 --bnd-cbits 3 --bnd-int-range 1000 --beopt:simplifycex NOSIM";
#define ARRSZ 5
//#define USEARRACC
#define USEINT
//#define USEARR
#define MAXINT 100000
#define NSRC 3
#define NTOTALF 5
#define NBITS 0
#define NINTS 3
#define NBARRS 0
#define NIARRS 0
#define ARRSZMAX 50
#define CBITS 3
#define INPBITS 3
//(LT|N_1:INT|(PLUS|(NEG|N_3:INT|)|N_2:INT|)|)
#include "..//ast.skh"
//Hardcoded evaluation of d-dag
Val ddag(Val[NTOTALF] vals){
	return new BIT(b=(getIntUpCast(vals[0]) < ((- getIntUpCast(vals[2])) + getIntUpCast(vals[1]))));
}
harness void prnotimply1(){
	int N_1 = ??(INPBITS);
	int N_2 = ??(INPBITS);
	int N_3 = ??(INPBITS);
	assert( !pred( N_1, N_2, N_3) && (((N_1 == N_2) || (N_1 != N_2))));
}
harness void prnotimply2(){
	int N_1 = ??(INPBITS);
	int N_2 = ??(INPBITS);
	int N_3 = ??(INPBITS);
	assert( !pred( N_1, N_2, N_3) && ((N_1 >= N_2)));
}
harness void prnotimply3(){
	int N_1 = ??(INPBITS);
	int N_2 = ??(INPBITS);
	int N_3 = ??(INPBITS);
	assert( !pred( N_1, N_2, N_3) && ((N_1 >= 1)));
}
harness void prnotimply4(){
	int N_1 = ??(INPBITS);
	int N_2 = ??(INPBITS);
	int N_3 = ??(INPBITS);
	assert( !pred( N_1, N_2, N_3) && (((N_1 >= N_3) || (N_2 > N_3))));
}
bit sC1(int N_1,int N_2,int N_3){
	bit stat1 = (N_1 == 4);
	if(stat1){
		return (pred( N_1, N_2, N_3));
	}
	else{
		return true;
	}
}
bit sC2(int N_1,int N_2,int N_3){
	bit stat2 = (N_1 == 3);
	if(stat2){
		return (pred( N_1, N_2, N_3));
	}
	else{
		return true;
	}
}
harness void staticFinalCheck(int N_1_1,int N_2_1,int N_3_1,int N_1_2,int N_2_2,int N_3_2){
	N_1_1=N_1_1-3;
	N_2_1=N_2_1-3;
	N_3_1=N_3_1-3;
	N_1_2=N_1_2-3;
	N_2_2=N_2_2-3;
	N_3_2=N_3_2-3;
	assert(sC1( N_1_1, N_2_1, N_3_1) || sC2( N_1_2, N_2_2, N_3_2));
}
bit pred(int N_1,int N_2,int N_3){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	/*N_1=N_1-3;*/	vals[0] = new INT(N=N_1); SETINT(0) //N_1 INT
	/*N_2=N_2-3;*/	vals[1] = new INT(N=N_2); SETINT(1) //N_2 INT
	/*N_3=N_3-3;*/	vals[2] = new INT(N=N_3); SETINT(2) //N_3 INT
	return predG(vals,isBit,isArr,2);
}
@Gen("arithexpr_3d_3v_2n_i_i_i_not_and_or_xor_lt_eq_neg_plus_times_div_mod_c0_c1_c2_outb")
bit arithExpr(int N_1,int N_2,int N_3);
//harness specifying the synthesis constraints
harness void main(int N_1,int N_2,int N_3){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	N_1=N_1-3;	vals[0] = new INT(N=N_1); SETINT(0) //N_1 INT
	N_2=N_2-3;	vals[1] = new INT(N=N_2); SETINT(1) //N_2 INT
	N_3=N_3-3;	vals[2] = new INT(N=N_3); SETINT(2) //N_3 INT
	if(pred( N_1, N_2, N_3)){
Val VAE = new BIT(b=arithExpr( N_1, N_2, N_3));
assert(checkEq(VAE,ddag(vals)));
	}
}