pragma options "--slv-timeout 4 --bnd-inbits 4 --bnd-cbits 3 --bnd-int-range 1000 --beopt:simplifycex NOSIM";
#define ARRSZ 5
//#define USEARRACC
//#define USEINT
//#define USEARR
#define MAXINT 100000
#define NSRC 3
#define NTOTALF 5
#define NBITS 2
#define NINTS 1
#define NBARRS 0
#define NIARRS 0
#define ARRSZMAX 50
#define CBITS 3
#define INPBITS 4
//(NOT|(AND|(EQ|N_2:INT|N_3:BOOL|)|N_1:BOOL|)|)
#include "ast.skh"

@Gen("swapperpred_b_i_b_c0_c1_2d")
bit pred(bit N_1,int N_2,bit N_3);

//Hardcoded evaluation of d-dag
Val ddag(Val[NTOTALF] vals){
	return new BIT(b=(! (checkEq( (vals[1]), (vals[2])) && getBit(vals[0]))));
}
bit sC1(bit N_1,int N_2,bit N_3){
	bit stat1 = ! N_3;
	if(stat1){
		return (pred( N_1, N_2, N_3));
	}
	else{
		return true;
	}
}
bit sC2(bit N_1,int N_2,bit N_3){
	bit stat2 = (N_2 >= 0 && N_2 <= 1) && N_3;
	if(stat2){
		return (pred( N_1, N_2, N_3));
	}
	else{
		return true;
	}
}
bit sC3(bit N_1,int N_2,bit N_3){
	bit stat3 = ! N_3 && (N_2 >= 0 && N_2 <= 1);
	if(stat3){
		return (pred( N_1, N_2, N_3));
	}
	else{
		return true;
	}
}
bit sC4(bit N_1,int N_2,bit N_3){
	bit stat4 = N_3;
	if(stat4){
		return (pred( N_1, N_2, N_3));
	}
	else{
		return true;
	}
}
harness void staticFinalCheck(bit N_1_1,int N_2_1,bit N_3_1,bit N_1_2,int N_2_2,bit N_3_2,bit N_1_3,int N_2_3,bit N_3_3,bit N_1_4,int N_2_4,bit N_3_4){
	N_2_1=N_2_1-7;
	N_2_2=N_2_2-7;
	N_2_3=N_2_3-7;
	N_2_4=N_2_4-7;
	assert(sC1( N_1_1, N_2_1, N_3_1) || sC2( N_1_2, N_2_2, N_3_2) || sC3( N_1_3, N_2_3, N_3_3) || sC4( N_1_4, N_2_4, N_3_4));
}
/*bit pred(bit N_1,int N_2,bit N_3){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	vals[0] = new BIT(b=N_1); SETBIT(0) //N_1 BOOL
		vals[1] = new INT(N=N_2); SETINT(1) //N_2 INT
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	return predG(vals,isBit,isArr,2);
}*/
//harness specifying the synthesis constraints
harness void main(bit N_1,int N_2,bit N_3){
	Val[NTOTALF] vals;
	bit[NTOTALF] isBit = 0;
	bit[NTOTALF] isArr = 0;
	vals[0] = new BIT(b=N_1); SETBIT(0) //N_1 BOOL
	N_2=N_2-7;	vals[1] = new INT(N=N_2); SETINT(1) //N_2 INT
	vals[2] = new BIT(b=N_3); SETBIT(2) //N_3 BOOL
	if(pred( N_1, N_2, N_3)){
		int sz=NSRC;
		int cost=0;
		Node[NTOTALF] dag=dagGen(sz,cost,isBit,isArr,true,false);
		minimize (cost);
		int CT =NSRC;
		assert(checkEq(eval(CT,vals,dag,sz),ddag(vals)));
	}
}
