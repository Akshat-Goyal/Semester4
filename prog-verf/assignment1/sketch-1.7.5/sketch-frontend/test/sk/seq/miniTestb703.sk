
package P1{
    int foo<T>(fun f, T t){
        return f(t);
    }
    Q moo<T, Q>(fun f, fun ff, T t, Q q){
        return ff(foo(f,t), q);
    }
    harness void main(int q){
        int g(int i){
            return i;
        }
        int gg(int x, int y){
            return x + y;
        }
        assert foo(g, q)==q;
        assert moo(g, gg, q, q)==2*q;
    }
}

package P2{
    int foo<T>(fun f, T t){
        return f(t);
    }
    Q moo<T, Q>(fun f, fun ff, T t, Q q){
        return ff(foo(f,t), q);
    }
    int g<T>(T i){ 
        return 0;
    }
    harness void main(int q){        
        int gg(int x, int y){
            return x + y;
        }
        assert foo(g, q)==0; // Functions passed as arguments cannot have polymorphic outputs.
        assert moo(g, gg, q, q)==q;
    }    
}