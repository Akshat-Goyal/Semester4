pragma options "-V 10 --bnd-unroll-amnt 3 --bnd-mbits 4 --debug-show-dag";

int div(int a, int b){
    if(b != 0){
        return a/b;
    }else{
        return a;
    } 
}

harness void main(int al, int ah, int bl, int bh, int a, int b){
    al = al-10;
    ah = ah - 10;
    bl = bl - 10;
    bh = bh - 10; 
    a = a - 10;
    b = b - 10; 
    assume al <= a; 
    assume a <= ah;
    assume bl <= b;
    assume b <= bh;
    assume bh != 0;
    assume bl != 0;

    int[2] r = range(al, ah, bl, bh);
    assert r[0] <= div(a, b);
    assert r[1] >= div(a,b);
    if(al == 5  && ah == 10 && bl == 2 && bh == 4){        
        assert (r[1]-r[0]) < 5;
    }
    if(al == -10  && ah == -5 && bl == -4 && bh == -2){        
        assert (r[1]-r[0]) < 5;
    }
    if(al == -10  && ah == -5 && bl == 2 && bh == 4){        
        assert (r[1]-r[0]) < 5;
    }
    if(al == 5  && ah == 10 && bl == -4 && bh == -2){        
        assert (r[1]-r[0]) < 5;
    }
}


int[2] range(int alo, int ahi, int blo, int bhi){
    if(alo > 0 && blo > 0){
        return {div(alo, bhi), div(ahi, blo)};
    }
    generator int gen2(){
        if(??) return div({|(-)? (alo | ahi) |}, {|blo | bhi|});
        else return {| (-)? ( alo | ahi | blo | bhi | 0 | 1)  |};
    }

    if(ahi <= 0 && bhi < 0){
        return {gen2(), gen2()};
    }
    if(ahi <= 0 && blo > 0){
        return {gen2(), gen2()};
    }
    if(alo > 0 && bhi < 0){
        return {gen2(), gen2()};
    }
    generator bit gen1(){
        bit t = 1;
        minrepeat{
        int x = gen2();
        int y = gen2();
        t = t && {| x (> | >= | ==) y |};
        }
        return  t;
    }
    minrepeat{
        if(gen1()){
            return {gen2(), gen2()};
        }
    }

}