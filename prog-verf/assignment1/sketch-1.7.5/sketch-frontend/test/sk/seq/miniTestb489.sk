pragma options "--bnd-inline-amnt 5 --bnd-inbits 3 --bnd-cbits 3 --bnd-unroll-amnt 8  --be:angelic-model";
int N =5;


int[N] bsort(int[N] input){
    int[N] output=input;
    int[N] done = 0;
    int k=0;
    for(int i=0; i<N; ++i){
       for(int j=i+1; j<N; ++j){
          if( output[j]< output[i]){
             int tmp = output[j];
             output[j] = output[i];
             output[i] = tmp;
          }
       }
    }
    return output;
 }

harness void test2(int x){       
    bsort(x);
}


@Native("{ bsort(x, _out); }")
int[N] sortuf(int[N] x);

model int[N] msort(int[N] x){
    int[N] rv = sortuf(x);
    for(int i=0;i<N;i++){
        if(i<N-1) assert(rv[i] <= rv[i+1]);
        int c1 =0; int c2=0;
        for(int j=0;j<N;j++){
            if(rv[j] == rv[i]) c1++;
            if(x[j] == rv[i]) c2++;
        }
        assert(c1 == c2);
    }
    
    return rv;
}

generator int abs(int x){
    if(x<0) return -x;
    else return x;
}

generator int min(int x,int y){
    if(x < y) return x;
    else return y;
}

harness void main(int[N] arr){//find closest pair distance in arr
    if(N<2) return;

    int t = arr[1]-arr[0];
    t = (t>0)? t: -t;
    int currmin = t;
    for(int i=0;i<N;++i){
        for(int j=i+1;j<N;++j){
                t = arr[j] - arr[i];
            t = (t>0)? t: -t;
                        if(currmin>t) currmin = t;
        }
    }
    
    int[N] sarr = msort(arr);

    t = sarr[1] - sarr[0];
    t = (t>0)? t : -t;
    int currmin2 = t;
    //int x =??;
    //if(x >= N-1) return;
    for(int i=??;{|i  (< | <= | > ) (N-1) |};i++){
            t = sarr[i+1] - sarr[i];
        t = (t>0)? t: -t;
        if(currmin2>t) currmin2 = t;
    }
    assert(currmin == currmin2);
}
