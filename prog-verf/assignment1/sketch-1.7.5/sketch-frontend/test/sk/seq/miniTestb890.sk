pragma options "--fe-fpencoding TO_BACKEND";

include "math.skh";
#define SCALAR float 
#define DEPTH 3

adt CuboidHint {
	SCALAR theta_x;
	SCALAR theta_y;
	SCALAR theta_z;
	int xlen;
	int ylen;
	int zlen;
	SCALAR[xlen] xlist;
	SCALAR[ylen] ylist;
	SCALAR[zlen] zlist;
}

adt CylinderHint {
	SCALAR theta_x;
	SCALAR theta_y;
	SCALAR theta_z;
	SCALAR radius;
	SCALAR y;
	SCALAR z;
	int xlen;
	SCALAR[xlen] xlist;
}

int NUM_DATA = 32;
SCALAR[NUM_DATA] xs = {-0.25, 0.25, 0.75, 0.75, 0.125, 0.125, 0.125, -0.125, -1.25, -1.75, -0.75, -1.25, 0.75, 1.25, 1.75, 1.25, -0.125, -0.375, 0.375, 0.125, 0.625, 0.625, -0.125, -0.625, 0.4375, 0.4375, 0.4375, 0.3125, 0.28125, 0.53125, 0.53125, 0.34375};
SCALAR[NUM_DATA] ys = {0.75, 0.75, 1.25, 0.25, 0.125, 0.125, 1.125, 0.875, 0.25, 0.25, 1.75, 1.25, 1.75, 0.75, 1.75, 1.75, 0.125, 0.125, 0.375, 0.375, 0.375, 0.375, 0.375, 0.875, 0.6875, 0.8125, 0.5625, 1.0625, 1.03125, 0.96875, 0.84375, 1.09375};
SCALAR[NUM_DATA] zs = {0.25, 0.25, -1.25, 1.25, 0.125, 0.375, 0.875, 1.125, 1.75, -0.25, -0.25, 1.25, 1.25, 1.75, 1.75, 1.75, 0.875, 0.625, 0.875, 0.875, 0.125, 0.375, 0.125, 0.375, 0.8125, 0.8125, 0.8125, 0.8125, 0.28125, 0.28125, 0.28125, 0.28125};
bit[NUM_DATA] labels = {1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0};



generator bit getSphere(Vector p) {
	
	assert false;
	return false;
}
    

int numCuboidHints = 3;
CuboidHint[numCuboidHints] cuboidHints = {

        new CuboidHint(theta_x = -1.50122045462, theta_y = -2.56730617462, theta_z = -0.910208964033,
        	xlen = 3, ylen = 3, zlen = 3,
          	xlist = {0.4989847914752972, -10.0, 10.0},
		ylist = {-0.057148975282102, -10.0, 10.0},
		zlist = {0.5808131684241079, -10.0, 10.0}), 

        new CuboidHint(theta_x = -1.50094201363, theta_y = -3.10677160781, theta_z = -1.1368996736,
        	xlen = 4, ylen = 4, zlen = 4,
          	xlist = {0.9999992693613394, -1.3252403523550777e-07},
		ylist = {-8.863464075372543e-08, 0.6000002760459278},
		zlist = {1.000000051600459, 5.314310274220835e-08}), 

        new CuboidHint(theta_x = -0.969661214273, theta_y = -3.13273556576, theta_z = -1.48509256764,
        	xlen = 4, ylen = 4, zlen = 4,
          	xlist = {0.5209767847175707, 1.1209795353893663},
		ylist = {0.9521614856080551, -0.04783817415609451},
		zlist = {-0.6828580016800219, -0.28285783644796914})};



int numCylinderHints = 1;
CylinderHint[numCylinderHints] cylinderHints = {
	new CylinderHint(theta_x = 0.0, theta_y = 0.0650733151944, theta_z = -0.613485082211,
			radius = 0.06, y = 1.05119379254, z = 0.254936654339, xlen = 2,
			xlist = {-10.0, 10.0})};



adt Vector{
  SCALAR x;
  SCALAR y;
  SCALAR z;
}



bit renderSphere(Vector p, SCALAR x, SCALAR y, SCALAR z, SCALAR r) {
	print("Sphere(Vector("); printSCALAR(x); print(","); printSCALAR(y); print(","); printSCALAR(z); print("),"); printSCALAR(r*r); print(")");
	return (p.x - x)*(p.x - x) + (p.y - y)*(p.y - y) + (p.z - z)*(p.z - z) - r*r <= 0.0;
}

// First rotate along z axis with -thetaz, then along y-axis with -thetay, finally along x-axis with -thetax
Vector inverse_rotate(Vector p, SCALAR theta_x, SCALAR theta_y, SCALAR theta_z) {
	float x0 = p.x; float y0 = p.y; float z0 = p.z;
	
	float x1 = cos(-theta_z)*x0 - sin(-theta_z)*y0;
	float y1 = sin(-theta_z)*x0 + cos(-theta_z)*y0;
	float z1 = z0;
	
	float x2 = cos(-theta_y)*x1 + sin(-theta_y)*z1;
	float y2 = y1;
	float z2 = -sin(-theta_y)*x1 + cos(-theta_y)*z1;
	
	float x3 = x2;
	float y3 = cos(-theta_x)*y2 -sin(-theta_x)*z2;
	float z3 = sin(-theta_x)*y2 + cos(-theta_x)*z2;

	return new Vector(x = x3, y = y3, z = z3);
	
}


generator bit getCuboid(Vector p) {
	CuboidHint c = cuboidHints[??];
	assert(c != null);
	Vector p_rotated = inverse_rotate(p, c.theta_x, c.theta_y, c.theta_z);
	
	float xl = c.xlist[??];
	float yl = c.ylist[??];
	float zl = c.zlist[??];
	
	float xu = c.xlist[??];
	float yu = c.ylist[??];
	float zu = c.zlist[??];
	
	assert(xl < xu);
	assert(yl < yu);
	assert(zl < zu);
	print("Cuboid(Vector("); printSCALAR(c.theta_x); print(","); printSCALAR(c.theta_y); print(","); printSCALAR(c.theta_z);
	print("),Vector("); printSCALAR(xl); print(","); printSCALAR(yl); print(","); printSCALAR(zl); 
	print("),Vector("); printSCALAR(xu - xl); print(","); printSCALAR(yu - yl); print(","); printSCALAR(zu - zl); print("))");
	
	bit x_in_range = p_rotated.x >= xl && p_rotated.x <= xu;
    bit y_in_range = p_rotated.y >= yl && p_rotated.y <= yu;
    bit z_in_range = p_rotated.z >= zl && p_rotated.z <= zu;
    return x_in_range && y_in_range && z_in_range;
}

generator bit getCylinder(Vector p) {
	CylinderHint c = cylinderHints[??];
	assert(c != null);
	
	Vector p_rotated = inverse_rotate(p, c.theta_x, c.theta_y, c.theta_z);
	float xl = c.xlist[??];
	float xu = c.xlist[??];
	assert(xl < xu);
	print("Cylinder(Vector("); printSCALAR(c.theta_x); print(","); printSCALAR(c.theta_y); print(","); printSCALAR(c.theta_z);
	print("),Vector("); printSCALAR(xl); print(","); printSCALAR(c.y); print(","); printSCALAR(c.z); print("),");
	print("Vector("); printSCALAR(xu - xl); print(",0,0),");
	printSCALAR(c.radius); print(")");
	
	bit withinRadius = (p_rotated.y - c.y) * (p_rotated.y - c.y) + (p_rotated.z - c.z) * (p_rotated.z - c.z) - c.radius*c.radius <= 0.0;
	bit withinHeight = p_rotated.x >= xl && p_rotated.x <= xu;
	return withinRadius && withinHeight;
}


//TODO: Add rankings: put unions before intersections, etc.
generator bit sample_expression(Vector p, int d){ 
	if (d > 1) {
		bit expression1 = sample_expression(p, d - 1);
		bit expression2 = sample_expression(p, d - 1);
	  if (??) {
		  print("Subtract(");
		  print(",");
		  print(")");
		  return expression1 && !expression2;
	  }
	  else if (??) { 
		  print("Union(");
		  print(",");
		  print(")");
		  return expression1 || expression2;
	  }
	  else if (??) {
		  print("Intersection(");
		  print(",");
		  print(")");
		  return expression1 && expression2;
	  }
	} 
	if (??) {
		return getSphere(p);
	} else if (??) {
		return getCuboid(p);
	} else {
		return getCylinder(p);
	}
}


bit contains(Vector p){
	bit b = sample_expression(p, DEPTH);
	print("\n");
	return b;
}


harness void main() {
	for (int i = 0; i < NUM_DATA; i++){
		Vector v = new Vector(x = xs[i], y = ys[i], z = zs[i]);
		if (labels[i]) {
			assert contains(v);
		} else {
			assert !contains(v);
		}
	}
}

@Native("{ std::cout << message; }")
void print([int n], char[n] message){}

@Native("{ std::cout << n; }")
void printSCALAR(SCALAR n){}

    

