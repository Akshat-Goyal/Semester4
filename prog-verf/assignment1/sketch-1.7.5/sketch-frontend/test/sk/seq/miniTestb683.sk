adt srcAST {
	NumS{ int v;}
	PlusS{ srcAST a; srcAST b;}
	MinusS{ srcAST a; srcAST b;}
	TrueS{}
	FalseS{}
}

adt dstAST{
	NumD{ int v;}
	BinopD{ opcode op; dstAST a; dstAST b;}
	BoolD{ bit val;}
}

adt opcode{
	PlusOp{}
	MinusOp{}
}

dstAST desugar(srcAST src){ 
	if (src == null) return null;
	switch(src) {
		repeat_case:
			return new ??( a= desugar(src.??), b= desugar(src.??),
			 op= ??, v=src.??, val=??);
		
	}
}
harness void test4() {
	srcAST in = new FalseS();
	dstAST out = new BoolD(val = 0);
	dstAST outB  = desugar(in);
	assert out === outB;
}
harness void test3() {
	srcAST in = new TrueS();
	dstAST out = new BoolD(val = 1);
	dstAST outB  = desugar(in);
	assert out === outB;
}
harness void test2(int x1, int x2) {
	srcAST in = new MinusS(a=new NumS(v=x1), b=new NumS(v=x2));
	dstAST out = new BinopD( op = new MinusOp(), a=new NumD(v=x1), b=new NumD(v=x2)); 
	dstAST outB = desugar(in);
	assert out === outB;
}
harness void test1(int x1, int x2) {
	srcAST in = new PlusS(a=new NumS(v=x1), b=new NumS(v=x2));
	dstAST out = new BinopD( op = new PlusOp(), a=new NumD(v=x1), b=new NumD(v=x2)); 
	dstAST outB = desugar(in);
	assert out === outB;
}