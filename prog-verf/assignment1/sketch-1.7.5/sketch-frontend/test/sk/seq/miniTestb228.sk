
/*
 * bug #30
 * Please find attached a working sketch. However, if we comment out line 29 and un-comment line 30, the tool will throw error. Similarly, with line 78 and 79. First error is due to improper handling of return statement inside a loop. I have no idea about the second error.
 * 
 */
#define SETBOUND 7 
#define N 3

pragma options "--bnd-inbits 3 --debug-verbosity 4 --bnd-heap-size 25";

struct Set {
    int numElements;
    int[SETBOUND] elems;
}

Set newSet() {
    Set X = new Set();
    X.numElements = 0;
    return X;
}

Set addElement(Set X, int y) {
    Set Z = newSet();
    for(int i = 0; i < X.numElements; i++) {
        Z.elems[i] = X.elems[i];
    }
    Z.numElements = X.numElements;
    for(int i = 0; i < Z.numElements; i++) {
        if(Z.elems[i] == y) {
            return Z;
        }
    }   
    Z.elems[Z.numElements] = y;
    //Z.numElements = Z.numElements + 1;
    Z.numElements++;
    return Z;
}

Set subElement(Set X, int y) {
    Set Z = newSet();
    for(int i = 0; i < X.numElements; i++) {
        Z.elems[i] = X.elems[i];
    }
    Z.numElements = X.numElements;
    for(int i = 0; i < Z.numElements; i++) {
        if(Z.elems[i] == y) {
            Z.elems[i] = Z.elems[Z.numElements - 1];
            Z.numElements = Z.numElements - 1;
            return Z;
        }
    }   
    return Z;
}

bit isSetEmpty(Set X) {
    return (X.numElements == 0);
}

bit isElemPresent(Set X, int y) {
    for(int i = 0; i < X.numElements; i++) {
        if(X.elems[i] == y) {
            return true;
        }
    }   
    return false;
}

int cardiniality(Set X) {
    return X.numElements;
}

Set unionSet(Set X, Set Y) {
    Set Z = newSet();
    for(int i = 0; i < X.numElements; i++) {
        Z.elems[i] = X.elems[i];
    }
    Z.numElements = X.numElements;
    int currIndex = X.numElements;
    for(int i = 0; i < Y.numElements; i++) {
        if(!isElemPresent(Z, Y.elems[i])) {
            Z.elems[currIndex] = Y.elems[i];
            Z.numElements = Z.numElements + 1;
            currIndex++;
            //currIndex = currIndex + 1;
        }   
    }
    return Z;
}

bit isEqual(Set X, Set Y) {
    if(X.numElements != Y.numElements) {
        return false;
    }
    for(int i = 0; i < X.numElements; i++) {
        if(!isElemPresent(Y, X.elems[i])) {
            return false;
        }
    }
    return true;
}

void dummy(int[N] elemsT, int[N] elemsS, int a) {

}

generator bit cond(int a, Set S, Set T) {
    return {| (!)?(isElemPresent((S|T), a)) | ?? |};
}

void sketch(int[N] elemsT, int[N] elemsS, int a) implements dummy{
    Set T = newSet();
    for(int i = 0; i < N; i++) {
        T = addElement(T, elemsT[i]);
    }
    Set T_ = addElement(T, a);
    Set S = newSet();
    for(int i = 0; i < N; i++) {
        S = addElement(S, elemsS[i]);
    }
    Set C = newSet();
    C = unionSet(T, S);
    if(cond(a, S, T)) {
        C = {| addElement(C, a) | C | subElement(C, a) |};
    }
    Set R = unionSet(T_, S);
    assert isEqual(C, R);
}
