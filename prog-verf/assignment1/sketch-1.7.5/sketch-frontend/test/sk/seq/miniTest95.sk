int W=4;

bit[W] slog2(bit[W] in) 
{
	bit[W] ret=0; 
	bit[W] ONE=0; ONE[0]=1;
	bit done=0;
	for(int i=(W-1);i>0;i--)
		if(!done && in[i]==0) {}
		else {
			done=1;
			ret=ret+ONE;
		}
	return ret;
}

generator bit iszero(bit[W] in) /* automatically rewritten */
{
	bit res=1;
	for(int i=0;i<W;i++)
		res=res & !in[i];
	return res;
}

bit[W] sklog2(bit[W] in) implements slog2 
{
	bit[W] ret=0; 
//	bit[W] ONE=0; ONE[0]=1;
//	const unsigned int b[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};
//	const unsigned int S[] = {1, 2, 4, 8, 16};

	
		if (!iszero(in & {*}))
		{
			in = in >> ??;
			ret = ret | {*};
		} 
	
			if (!iszero(in & {*}))
		{
			in = in >> 1;
			ret = ret | {*};
		}
	return ret;
}
