int NumTuples = 3;
#define NumPredicates 2

struct LocationTuple
{
  int location;
  int user;
  int timeStart;
  int timeEnd;
}

generator int getField(LocationTuple tuple){
    if(??){
        return tuple.location;
    }
    if(??){
        return tuple.user;
    }
    if(??){
        return tuple.timeStart;
    }
    if(??){
        return tuple.timeEnd;
    }
    assert false;
}

generator bit select (LocationTuple tuple) 
{
  bit out = 1;
  int cnt = 0;
  repeat(1){
      int t = getField(tuple);
      out = out && {| t ( < | > | == ) ??  |};
      cnt = cnt + 1;
      assert cnt < 2;
  }
  return out;
}


void initTuples (ref LocationTuple [NumTuples] tuples, int[NumTuples] location,
        int[NumTuples] user,
        int[NumTuples] timeStart,
        int[NumTuples] timeEnd)
{ 
  for (int i = 0; i < NumTuples; ++i)
  {
    tuples[i] = new LocationTuple();
    tuples[i].user = user[i];
    tuples[i].location = location[i];
    tuples[i].timeStart = timeStart[i];
    tuples[i].timeEnd = timeEnd[i];
  }
}


harness void sketch (int[NumTuples] location, int[NumTuples] user, int[NumTuples] timeStart, int[NumTuples] timeEnd)
{
   
  LocationTuple [NumTuples] tuples;
  initTuples(tuples, location, user, timeStart, timeEnd); 

  
  for (int i = 0; i < NumTuples; ++i)
  {
    LocationTuple tuple = tuples[i];
    bit q1 = (tuple.location == 1);
    bit q2 = (select(tuple) == 1); 
    assert q1 == q2;
  }    
}



