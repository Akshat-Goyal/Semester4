

include "math.skh";
include "vec2d.skh";


pragma options "--be:usesnopt --be:numericalsolver";

adt Segment{
    Point x;
    Point y;
}

Segment seg(double x1,double y1,double x2,double y2){
    return new Segment(x=point(x1,y1), y=point(x2,y2));
}

double len(Segment seg){
    return norm(seg.y .- seg.x);
}


bit nocross(Segment s1, Segment s2){
    Point b1 = s1.x;
    Point e1 = s1.y;
    Point b2 = s2.x;
    Point e2 = s2.y;
    double t1 = (b1.x - e1.x);
    double t2 = -(b2.x - e2.x);
    double t3 = (e2.x - e1.x);
    
    double t4 = (b1.y - e1.y);
    double t5 = -(b2.y - e2.y);
    double t6 = (e2.y - e1.y);
    double b = (t3-t6*t1/t4) / (t2 - t5*t1/t4);
    double a = (t6 - b*t5)/t4;
    
    return (a < -0.1) || (a > 1.1) || (b < -0.1) || (b > 1.1);
    
    // a*b1 + (1-a)*e1 =  b*b2 + (1-b)*e2
    // a*(b1-e1) - b*(b2-e2)  = e2 - e1
    // a *t1 + b*t2 = t3
    // a *t4 + b*t5 = t6
    
    // b = (t3-t6*t1/t4) / (t2 - t5*t1/t4);
}



@Native("{cout<<x<<\"  \"<<y<<endl;}")
void print(double x, double y){}


bit TRUE(){ return true; }

harness void main(){
    int N = 5;
    int O = 2;
    Segment obs;
    Segment segs, segs2;
    
    obs = seg(-10.0, 1.0, 10.0, 1.0);
    double a = ??;
    double b = ??;
    segs = seg(0.0, 5.0, a, b);
    segs2 = seg(a,b, 0.0, -1.0);
    assert nocross(segs, obs);
    assert nocross(segs2, obs);
    double l = len(segs);
}


