pragma options "--slv-simiters 300 --bnd-inbits 3 --bnd-inline-amnt 3 --bnd-unroll-amnt 3";

int HEAPSIZE = 4;
int LOCVARSIZE = 4;
int INTVARSIZE = 2;
int MBUDGET = 1;

include "lseg_header.skh";

int old_k, old_len, old_min, old_max;
int newer_k, newer_len, newer_min, newer_max;

int rec = {| 1 | 2 | 3 |}; // 1
int rank_var = {| 1 | 2 |}; // 1

/*
if (v2 != null && v2.key < k) {
	v1 = v2.next
	v1 = rec_ins(v1, k);
	v2.next = v1;
	return v2;
}
else {
	v1 = malloc();
	v1.key = k;
	v1.next = v2;
	return v1;
}
*/

void snapshot(int input, int k, ref int ok, ref int ol, ref int omin, ref int omax) {
	ol = len_comp(locvars[input]);
	omin = min_comp(locvars[input]);
	omax = max_comp(locvars[input]);
	ok = intvars[k];
}

bit non_trivial() {
	return basic_cond(2, 1);
	//return (!locvar_eq(2, 0)) && intderef_lt_var(2, 0);
}

bit pre_cond(int input) {
	return sll_inv(input);
}

bit post_cond(int r, ref int ok, ref int ol, ref int omin, ref int omax) {
	return sll_inv(r)
	&& len_equal_inv(r, ol + 1)
	&& min_equal_inv(r, ok < omin ? ok : omin)
	&& max_equal_inv(r, ok > omax ? ok : omax);
}

void rec_ins(int v, int kv, int recret, ref bit[HEAPSIZE-1] new_symbolic, ref int[HEAPSIZE-1] new_next, ref int[HEAPSIZE-1] new_supernext, ref int[HEAPSIZE-1] new_key) {

	locVarAssign(3, v);
	intVarAssign(1, kv, 1);
	
	// precondition
	assertPost(pre_cond(v));
			
	snapshot(3, 1, newer_k, newer_len, newer_min, newer_max);
	
	locvars[recret] = havoc(locvars[v], new_symbolic, new_next, new_supernext, new_key);
		
	// postcondition
	assumePre(post_cond(recret, newer_k, newer_len, newer_min, newer_max));
}

harness void ins(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive, bit[HEAPSIZE-1] new_symbolic, int[HEAPSIZE-1] new_next, int[HEAPSIZE-1] new_supernext, int[HEAPSIZE-1] new_key) {
	
	init(llocvars, lintvars, lnext, lsupernext, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());
	
	// precondition
	assume pre_cond(2);
	
	snapshot(2, 0, old_k, old_len, old_min, old_max);
	
	ranking_snapshot(rec, 2);

	if (non_trivial()) {
		statement(1, 0, 1, 1);
		//update_locvar(1, 2, 1);
    	//locderef2var(2, 1);
    	
    	assertPost(ranking_decreases(rec, rank_var));
    	rec_ins(rank_var, gen_all(1), gen_non_zero(1), new_symbolic, new_next, new_supernext, new_key);
		
		statement(1, 0, 1, 1);
		//if (??) locMutate(2, gen_all(3));
		//locMutate(2, 1);
		ret_loc(gen_non_zero(2));
	}
	else {
		create_node(1, 2, 1);
		//malloc(1);
		//intMutate(1, 0);
		//locMutate(1, 2);
		ret_loc(1);
	}

	// postcondition
	assertPost(post_cond(ret, old_k, old_len, old_min, old_max));
}
