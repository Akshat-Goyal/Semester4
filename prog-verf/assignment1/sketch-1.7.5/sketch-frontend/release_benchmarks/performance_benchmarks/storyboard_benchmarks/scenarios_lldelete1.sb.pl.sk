#define a 0
#define b 1
#define backe 2
#define backf 3
#define front1e 4
#define front1f 5
#define fronte 6
#define frontf 7
#define x 8
#define yloc 9
#define null 10
#define undef 11

struct state{
int head;
int temp1;
int temp2;
int y;
int[10] next;
int[10] val;
bit isEmpty;
}

void setInitialState(state initState, int i){
initState.head = null;
initState.temp1 = null;
initState.temp2 = null;
initState.y = null;
initState.next[a] = undef;
initState.next[b] = undef;
initState.next[backe] = undef;
initState.next[backf] = undef;
initState.next[front1e] = undef;
initState.next[front1f] = undef;
initState.next[fronte] = undef;
initState.next[frontf] = undef;
initState.next[x] = undef;
initState.next[yloc] = undef;
initState.val[a] = 0;
initState.val[b] = 0;
initState.val[backe] = 0;
initState.val[backf] = 0;
initState.val[front1e] = 0;
initState.val[front1f] = 0;
initState.val[fronte] = 0;
initState.val[frontf] = 0;
initState.val[x] = 0;
initState.val[yloc] = 0;
if(i==0){
initState.head = frontf;
initState.y = yloc;
initState.next[fronte] = a;
initState.next[a] = yloc;
initState.next[yloc] = b;
initState.next[b] = backf;
initState.next[backe] = null;
initState.val[frontf] = 1;
initState.val[fronte] = 2;
initState.val[a] = 3;
initState.val[b] = 5;
initState.val[yloc] = 4;
initState.val[backf] = 6;
initState.val[backe] = 7;
}
}

void assertFinalState(state finalState, int i){
if(finalState.isEmpty == 0){
if(i==0){
assert finalState.head == front1f && finalState.y == yloc && finalState.next[front1e] == a && finalState.next[a] == b && finalState.next[b] == backf && finalState.next[backe] == null;
}
}
}

 void assertNoGhostLocation(state fromState){
}

void spec(int[5] choice){
}




//skip
void fc1(state fromState, int choice){
return;
}

//head = temp1
void fc2(state fromState, int choice){
assert fromState.temp1 != undef;
fromState.head = fromState.temp1;
}

//head = temp2
void fc3(state fromState, int choice){
assert fromState.temp2 != undef;
fromState.head = fromState.temp2;
}

//head = y
void fc4(state fromState, int choice){
assert fromState.y != undef;
fromState.head = fromState.y;
}

//temp1 = head
void fc5(state fromState, int choice){
assert fromState.head != undef;
fromState.temp1 = fromState.head;
}

//temp1 = temp2
void fc6(state fromState, int choice){
assert fromState.temp2 != undef;
fromState.temp1 = fromState.temp2;
}

//temp1 = y
void fc7(state fromState, int choice){
assert fromState.y != undef;
fromState.temp1 = fromState.y;
}

//temp2 = head
void fc8(state fromState, int choice){
assert fromState.head != undef;
fromState.temp2 = fromState.head;
}

//temp2 = temp1
void fc9(state fromState, int choice){
assert fromState.temp1 != undef;
fromState.temp2 = fromState.temp1;
}

//temp2 = y
void fc10(state fromState, int choice){
assert fromState.y != undef;
fromState.temp2 = fromState.y;
}

//y = head
void fc11(state fromState, int choice){
assert fromState.head != undef;
fromState.y = fromState.head;
}

//y = temp1
void fc12(state fromState, int choice){
assert fromState.temp1 != undef;
fromState.y = fromState.temp1;
}

//y = temp2
void fc13(state fromState, int choice){
assert fromState.temp2 != undef;
fromState.y = fromState.temp2;
}

//head = head.next
void fc14(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.head = fromState.next[fromState.head];
}

//head = temp1.next
void fc15(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.head = fromState.next[fromState.temp1];
}

//head = temp2.next
void fc16(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.head = fromState.next[fromState.temp2];
}

//head = y.next
void fc17(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.head = fromState.next[fromState.y];
}

//temp1 = head.next
void fc18(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.temp1 = fromState.next[fromState.head];
}

//temp1 = temp1.next
void fc19(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.temp1 = fromState.next[fromState.temp1];
}

//temp1 = temp2.next
void fc20(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.temp1 = fromState.next[fromState.temp2];
}

//temp1 = y.next
void fc21(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.temp1 = fromState.next[fromState.y];
}

//temp2 = head.next
void fc22(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.temp2 = fromState.next[fromState.head];
}

//temp2 = temp1.next
void fc23(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.temp2 = fromState.next[fromState.temp1];
}

//temp2 = temp2.next
void fc24(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.temp2 = fromState.next[fromState.temp2];
}

//temp2 = y.next
void fc25(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.temp2 = fromState.next[fromState.y];
}

//y = head.next
void fc26(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.y = fromState.next[fromState.head];
}

//y = temp1.next
void fc27(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.y = fromState.next[fromState.temp1];
}

//y = temp2.next
void fc28(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.y = fromState.next[fromState.temp2];
}

//y = y.next
void fc29(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.y = fromState.next[fromState.y];
}

//head.next = head
void fc30(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.head != undef;
fromState.next[fromState.head] = fromState.head;
}

//head.next = temp1
void fc31(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.temp1 != undef;
fromState.next[fromState.head] = fromState.temp1;
}

//head.next = temp2
void fc32(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.temp2 != undef;
fromState.next[fromState.head] = fromState.temp2;
}

//head.next = y
void fc33(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.y != undef;
fromState.next[fromState.head] = fromState.y;
}

//temp1.next = head
void fc34(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.head != undef;
fromState.next[fromState.temp1] = fromState.head;
}

//temp1.next = temp1
void fc35(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.temp1 != undef;
fromState.next[fromState.temp1] = fromState.temp1;
}

//temp1.next = temp2
void fc36(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.temp2 != undef;
fromState.next[fromState.temp1] = fromState.temp2;
}

//temp1.next = y
void fc37(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.y != undef;
fromState.next[fromState.temp1] = fromState.y;
}

//temp2.next = head
void fc38(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.head != undef;
fromState.next[fromState.temp2] = fromState.head;
}

//temp2.next = temp1
void fc39(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.temp1 != undef;
fromState.next[fromState.temp2] = fromState.temp1;
}

//temp2.next = temp2
void fc40(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.temp2 != undef;
fromState.next[fromState.temp2] = fromState.temp2;
}

//temp2.next = y
void fc41(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.y != undef;
fromState.next[fromState.temp2] = fromState.y;
}

//y.next = head
void fc42(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.head != undef;
fromState.next[fromState.y] = fromState.head;
}

//y.next = temp1
void fc43(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.temp1 != undef;
fromState.next[fromState.y] = fromState.temp1;
}

//y.next = temp2
void fc44(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.temp2 != undef;
fromState.next[fromState.y] = fromState.temp2;
}

//y.next = y
void fc45(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.y != undef;
fromState.next[fromState.y] = fromState.y;
}

//head.next = temp1.next
void fc46(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.next[fromState.head] = fromState.next[fromState.temp1];
}

//head.next = temp2.next
void fc47(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.next[fromState.head] = fromState.next[fromState.temp2];
}

//head.next = y.next
void fc48(state fromState, int choice){
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.next[fromState.head] = fromState.next[fromState.y];
}

//temp1.next = head.next
void fc49(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.next[fromState.temp1] = fromState.next[fromState.head];
}

//temp1.next = temp2.next
void fc50(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.next[fromState.temp1] = fromState.next[fromState.temp2];
}

//temp1.next = y.next
void fc51(state fromState, int choice){
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.next[fromState.temp1] = fromState.next[fromState.y];
}

//temp2.next = head.next
void fc52(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.next[fromState.temp2] = fromState.next[fromState.head];
}

//temp2.next = temp1.next
void fc53(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.next[fromState.temp2] = fromState.next[fromState.temp1];
}

//temp2.next = y.next
void fc54(state fromState, int choice){
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.next[fromState.y] != undef ;
fromState.next[fromState.temp2] = fromState.next[fromState.y];
}

//y.next = head.next
void fc55(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.head != null;
assert fromState.head != undef;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
assert fromState.next[fromState.head] != undef ;
fromState.next[fromState.y] = fromState.next[fromState.head];
}

//y.next = temp1.next
void fc56(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.temp1 != null;
assert fromState.temp1 != undef;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
assert fromState.next[fromState.temp1] != undef ;
fromState.next[fromState.y] = fromState.next[fromState.temp1];
}

//y.next = temp2.next
void fc57(state fromState, int choice){
assert fromState.y != null;
assert fromState.y != undef;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
assert fromState.temp2 != null;
assert fromState.temp2 != undef;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
assert fromState.next[fromState.temp2] != undef ;
fromState.next[fromState.y] = fromState.next[fromState.temp2];
}

//true
void fc58(state fromState, int choice){
}

//false
void fc59(state fromState, int choice){
fromState.isEmpty = 1;
}

//head != null
void fc60(state fromState, int choice){
if(fromState.head == null)
fromState.isEmpty = 1;
}

//temp1 != null
void fc61(state fromState, int choice){
if(fromState.temp1 == null)
fromState.isEmpty = 1;
}

//temp2 != null
void fc62(state fromState, int choice){
if(fromState.temp2 == null)
fromState.isEmpty = 1;
}

//y != null
void fc63(state fromState, int choice){
if(fromState.y == null)
fromState.isEmpty = 1;
}

//head.val > temp1.val
void fc64(state fromState, int choice){
if(fromState.head == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] > fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//head.val == temp1.val
void fc65(state fromState, int choice){
if(fromState.head == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] == fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//head.val != temp1.val
void fc66(state fromState, int choice){
if(fromState.head == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] != fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//head.val > temp2.val
void fc67(state fromState, int choice){
if(fromState.head == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] > fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val == temp2.val
void fc68(state fromState, int choice){
if(fromState.head == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] == fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val != temp2.val
void fc69(state fromState, int choice){
if(fromState.head == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] != fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val > y.val
void fc70(state fromState, int choice){
if(fromState.head == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] > fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//head.val == y.val
void fc71(state fromState, int choice){
if(fromState.head == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] == fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//head.val != y.val
void fc72(state fromState, int choice){
if(fromState.head == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] != fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp1.val > head.val
void fc73(state fromState, int choice){
if(fromState.temp1 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] > fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp1.val == head.val
void fc74(state fromState, int choice){
if(fromState.temp1 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] == fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp1.val != head.val
void fc75(state fromState, int choice){
if(fromState.temp1 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] != fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp1.val > temp2.val
void fc76(state fromState, int choice){
if(fromState.temp1 == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] > fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//temp1.val == temp2.val
void fc77(state fromState, int choice){
if(fromState.temp1 == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] == fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//temp1.val != temp2.val
void fc78(state fromState, int choice){
if(fromState.temp1 == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] != fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//temp1.val > y.val
void fc79(state fromState, int choice){
if(fromState.temp1 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] > fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp1.val == y.val
void fc80(state fromState, int choice){
if(fromState.temp1 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] == fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp1.val != y.val
void fc81(state fromState, int choice){
if(fromState.temp1 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] != fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp2.val > head.val
void fc82(state fromState, int choice){
if(fromState.temp2 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] > fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp2.val == head.val
void fc83(state fromState, int choice){
if(fromState.temp2 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] == fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp2.val != head.val
void fc84(state fromState, int choice){
if(fromState.temp2 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] != fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp2.val > temp1.val
void fc85(state fromState, int choice){
if(fromState.temp2 == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] > fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//temp2.val == temp1.val
void fc86(state fromState, int choice){
if(fromState.temp2 == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] == fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//temp2.val != temp1.val
void fc87(state fromState, int choice){
if(fromState.temp2 == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] != fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//temp2.val > y.val
void fc88(state fromState, int choice){
if(fromState.temp2 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] > fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp2.val == y.val
void fc89(state fromState, int choice){
if(fromState.temp2 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] == fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp2.val != y.val
void fc90(state fromState, int choice){
if(fromState.temp2 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] != fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//y.val > head.val
void fc91(state fromState, int choice){
if(fromState.y == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] > fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//y.val == head.val
void fc92(state fromState, int choice){
if(fromState.y == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] == fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//y.val != head.val
void fc93(state fromState, int choice){
if(fromState.y == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] != fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//y.val > temp1.val
void fc94(state fromState, int choice){
if(fromState.y == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] > fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//y.val == temp1.val
void fc95(state fromState, int choice){
if(fromState.y == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] == fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//y.val != temp1.val
void fc96(state fromState, int choice){
if(fromState.y == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] != fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//y.val > temp2.val
void fc97(state fromState, int choice){
if(fromState.y == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] > fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//y.val == temp2.val
void fc98(state fromState, int choice){
if(fromState.y == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] == fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//y.val != temp2.val
void fc99(state fromState, int choice){
if(fromState.y == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] != fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val > temp1.val
void fc100(state fromState, int choice){
if(fromState.head == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] > fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//head.val == temp1.val
void fc101(state fromState, int choice){
if(fromState.head == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] == fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//head.val != temp1.val
void fc102(state fromState, int choice){
if(fromState.head == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] != fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//head.val > temp2.val
void fc103(state fromState, int choice){
if(fromState.head == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] > fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val == temp2.val
void fc104(state fromState, int choice){
if(fromState.head == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] == fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val != temp2.val
void fc105(state fromState, int choice){
if(fromState.head == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] != fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//head.val > y.val
void fc106(state fromState, int choice){
if(fromState.head == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] > fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//head.val == y.val
void fc107(state fromState, int choice){
if(fromState.head == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] == fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//head.val != y.val
void fc108(state fromState, int choice){
if(fromState.head == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.head] != fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp1.val > head.val
void fc109(state fromState, int choice){
if(fromState.temp1 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] > fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp1.val == head.val
void fc110(state fromState, int choice){
if(fromState.temp1 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] == fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp1.val != head.val
void fc111(state fromState, int choice){
if(fromState.temp1 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] != fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp1.val > temp2.val
void fc112(state fromState, int choice){
if(fromState.temp1 == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] > fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//temp1.val == temp2.val
void fc113(state fromState, int choice){
if(fromState.temp1 == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] == fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//temp1.val != temp2.val
void fc114(state fromState, int choice){
if(fromState.temp1 == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] != fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//temp1.val > y.val
void fc115(state fromState, int choice){
if(fromState.temp1 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] > fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp1.val == y.val
void fc116(state fromState, int choice){
if(fromState.temp1 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] == fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp1.val != y.val
void fc117(state fromState, int choice){
if(fromState.temp1 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp1] != fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp2.val > head.val
void fc118(state fromState, int choice){
if(fromState.temp2 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] > fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp2.val == head.val
void fc119(state fromState, int choice){
if(fromState.temp2 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] == fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp2.val != head.val
void fc120(state fromState, int choice){
if(fromState.temp2 == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] != fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//temp2.val > temp1.val
void fc121(state fromState, int choice){
if(fromState.temp2 == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] > fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//temp2.val == temp1.val
void fc122(state fromState, int choice){
if(fromState.temp2 == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] == fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//temp2.val != temp1.val
void fc123(state fromState, int choice){
if(fromState.temp2 == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] != fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//temp2.val > y.val
void fc124(state fromState, int choice){
if(fromState.temp2 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] > fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp2.val == y.val
void fc125(state fromState, int choice){
if(fromState.temp2 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] == fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//temp2.val != y.val
void fc126(state fromState, int choice){
if(fromState.temp2 == null || fromState.y == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.temp2] != fromState.val[fromState.y]))
fromState.isEmpty = 1;
}

//y.val > head.val
void fc127(state fromState, int choice){
if(fromState.y == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] > fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//y.val == head.val
void fc128(state fromState, int choice){
if(fromState.y == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] == fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//y.val != head.val
void fc129(state fromState, int choice){
if(fromState.y == null || fromState.head == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] != fromState.val[fromState.head]))
fromState.isEmpty = 1;
}

//y.val > temp1.val
void fc130(state fromState, int choice){
if(fromState.y == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] > fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//y.val == temp1.val
void fc131(state fromState, int choice){
if(fromState.y == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] == fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//y.val != temp1.val
void fc132(state fromState, int choice){
if(fromState.y == null || fromState.temp1 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] != fromState.val[fromState.temp1]))
fromState.isEmpty = 1;
}

//y.val > temp2.val
void fc133(state fromState, int choice){
if(fromState.y == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] > fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//y.val == temp2.val
void fc134(state fromState, int choice){
if(fromState.y == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] == fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

//y.val != temp2.val
void fc135(state fromState, int choice){
if(fromState.y == null || fromState.temp2 == null){fromState.isEmpty = 1;
 return;
}
if(!(fromState.val[fromState.y] != fromState.val[fromState.temp2]))
fromState.isEmpty = 1;
}

// unfold head 
void fc136(state fromState, int choice){
if(fromState.head == frontf){
if(choice == 0){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = frontf;
fromState.val[x] = 1;
fromState.val[frontf] = 2;
}
 else if(choice == 1){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = fromState.next[fronte];
fromState.val[x] = fromState.val[frontf];
fromState.next[fronte] = undef;
}
 else assert false;
}
}

// unfold temp1 
void fc137(state fromState, int choice){
if(fromState.temp1 == frontf){
if(choice == 0){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = frontf;
fromState.val[x] = 1;
fromState.val[frontf] = 2;
}
 else if(choice == 1){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = fromState.next[fronte];
fromState.val[x] = fromState.val[frontf];
fromState.next[fronte] = undef;
}
 else assert false;
}
}

// unfold temp2 
void fc138(state fromState, int choice){
if(fromState.temp2 == frontf){
if(choice == 0){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = frontf;
fromState.val[x] = 1;
fromState.val[frontf] = 2;
}
 else if(choice == 1){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = fromState.next[fronte];
fromState.val[x] = fromState.val[frontf];
fromState.next[fronte] = undef;
}
 else assert false;
}
}

// unfold y 
void fc139(state fromState, int choice){
if(fromState.y == frontf){
if(choice == 0){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = frontf;
fromState.val[x] = 1;
fromState.val[frontf] = 2;
}
 else if(choice == 1){
if(fromState.head == frontf) fromState.head = x;
if(fromState.temp1 == frontf) fromState.temp1 = x;
if(fromState.temp2 == frontf) fromState.temp2 = x;
if(fromState.y == frontf) fromState.y = x;
fromState.val[x] = fromState.val[frontf];
if (fromState.next[a] == frontf) fromState.next[a] = x;
if (fromState.next[b] == frontf) fromState.next[b] = x;
if (fromState.next[backe] == frontf) fromState.next[backe] = x;
if (fromState.next[backf] == frontf) fromState.next[backf] = x;
if (fromState.next[front1e] == frontf) fromState.next[front1e] = x;
if (fromState.next[front1f] == frontf) fromState.next[front1f] = x;
if (fromState.next[fronte] == frontf) fromState.next[fronte] = x;
if (fromState.next[frontf] == frontf) fromState.next[frontf] = x;
if (fromState.next[x] == frontf) fromState.next[x] = x;
if (fromState.next[yloc] == frontf) fromState.next[yloc] = x;
fromState.next[x] = fromState.next[fronte];
fromState.val[x] = fromState.val[frontf];
fromState.next[fronte] = undef;
}
 else assert false;
}
}

// fold head 
void fc140(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
if(fromState.head == x){
if (prevState.next[front1e] == x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == front1f) fromState.next[a] = front1f;
if (fromState.next[b] == front1f) fromState.next[b] = front1f;
if (fromState.next[backe] == front1f) fromState.next[backe] = front1f;
if (fromState.next[backf] == front1f) fromState.next[backf] = front1f;
if (fromState.next[front1e] == front1f) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == front1f) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == front1f) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == front1f) fromState.next[frontf] = front1f;
if (fromState.next[x] == front1f) fromState.next[x] = front1f;
if (fromState.next[yloc] == front1f) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else if (prevState.next[front1e] != x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == x) fromState.next[a] = front1f;
if (fromState.next[b] == x) fromState.next[b] = front1f;
if (fromState.next[backe] == x) fromState.next[backe] = front1f;
if (fromState.next[backf] == x) fromState.next[backf] = front1f;
if (fromState.next[front1e] == x) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == x) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == x) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == x) fromState.next[frontf] = front1f;
if (fromState.next[x] == x) fromState.next[x] = front1f;
if (fromState.next[yloc] == x) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else assert false;
}
}

// fold temp1 
void fc141(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
if(fromState.temp1 == x){
if (prevState.next[front1e] == x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == front1f) fromState.next[a] = front1f;
if (fromState.next[b] == front1f) fromState.next[b] = front1f;
if (fromState.next[backe] == front1f) fromState.next[backe] = front1f;
if (fromState.next[backf] == front1f) fromState.next[backf] = front1f;
if (fromState.next[front1e] == front1f) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == front1f) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == front1f) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == front1f) fromState.next[frontf] = front1f;
if (fromState.next[x] == front1f) fromState.next[x] = front1f;
if (fromState.next[yloc] == front1f) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else if (prevState.next[front1e] != x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == x) fromState.next[a] = front1f;
if (fromState.next[b] == x) fromState.next[b] = front1f;
if (fromState.next[backe] == x) fromState.next[backe] = front1f;
if (fromState.next[backf] == x) fromState.next[backf] = front1f;
if (fromState.next[front1e] == x) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == x) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == x) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == x) fromState.next[frontf] = front1f;
if (fromState.next[x] == x) fromState.next[x] = front1f;
if (fromState.next[yloc] == x) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else assert false;
}
}

// fold temp2 
void fc142(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
if(fromState.temp2 == x){
if (prevState.next[front1e] == x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == front1f) fromState.next[a] = front1f;
if (fromState.next[b] == front1f) fromState.next[b] = front1f;
if (fromState.next[backe] == front1f) fromState.next[backe] = front1f;
if (fromState.next[backf] == front1f) fromState.next[backf] = front1f;
if (fromState.next[front1e] == front1f) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == front1f) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == front1f) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == front1f) fromState.next[frontf] = front1f;
if (fromState.next[x] == front1f) fromState.next[x] = front1f;
if (fromState.next[yloc] == front1f) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else if (prevState.next[front1e] != x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == x) fromState.next[a] = front1f;
if (fromState.next[b] == x) fromState.next[b] = front1f;
if (fromState.next[backe] == x) fromState.next[backe] = front1f;
if (fromState.next[backf] == x) fromState.next[backf] = front1f;
if (fromState.next[front1e] == x) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == x) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == x) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == x) fromState.next[frontf] = front1f;
if (fromState.next[x] == x) fromState.next[x] = front1f;
if (fromState.next[yloc] == x) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else assert false;
}
}

// fold y 
void fc143(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
if(fromState.y == x){
if (prevState.next[front1e] == x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == front1f) fromState.next[a] = front1f;
if (fromState.next[b] == front1f) fromState.next[b] = front1f;
if (fromState.next[backe] == front1f) fromState.next[backe] = front1f;
if (fromState.next[backf] == front1f) fromState.next[backf] = front1f;
if (fromState.next[front1e] == front1f) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == front1f) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == front1f) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == front1f) fromState.next[frontf] = front1f;
if (fromState.next[x] == front1f) fromState.next[x] = front1f;
if (fromState.next[yloc] == front1f) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else if (prevState.next[front1e] != x) {
if(fromState.head == x) fromState.head = front1e;
if(fromState.temp1 == x) fromState.temp1 = front1e;
if(fromState.temp2 == x) fromState.temp2 = front1e;
if(fromState.y == x) fromState.y = front1e;
fromState.val[front1e] = fromState.val[x];
if (fromState.next[a] == x) fromState.next[a] = front1f;
if (fromState.next[b] == x) fromState.next[b] = front1f;
if (fromState.next[backe] == x) fromState.next[backe] = front1f;
if (fromState.next[backf] == x) fromState.next[backf] = front1f;
if (fromState.next[front1e] == x) fromState.next[front1e] = front1f;
if (fromState.next[front1f] == x) fromState.next[front1f] = front1f;
if (fromState.next[fronte] == x) fromState.next[fronte] = front1f;
if (fromState.next[frontf] == x) fromState.next[frontf] = front1f;
if (fromState.next[x] == x) fromState.next[x] = front1f;
if (fromState.next[yloc] == x) fromState.next[yloc] = front1f;
fromState.next[front1e] = fromState.next[x];
fromState.next[x] = undef;
}
 else assert false;
}
}

void copystate(state fromState, state toState){
toState.head = fromState.head;
toState.temp1 = fromState.temp1;
toState.temp2 = fromState.temp2;
toState.y = fromState.y;
toState.next[a] = fromState.next[a];
toState.next[b] = fromState.next[b];
toState.next[backe] = fromState.next[backe];
toState.next[backf] = fromState.next[backf];
toState.next[front1e] = fromState.next[front1e];
toState.next[front1f] = fromState.next[front1f];
toState.next[fronte] = fromState.next[fronte];
toState.next[frontf] = fromState.next[frontf];
toState.next[x] = fromState.next[x];
toState.next[yloc] = fromState.next[yloc];
toState.isEmpty = fromState.isEmpty;
}
void f9(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f9a(fromState, choice);
if(fromState.isEmpty == 0) f9b(fromState, choice);
else fromState.isEmpty = 0;
}
void f10(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f10a(fromState, choice);
if(fromState.isEmpty == 0) f10b(fromState, choice);
else fromState.isEmpty = 0;
}
void f11(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f11a(fromState, choice);
if(fromState.isEmpty == 0) f11b(fromState, choice);
else fromState.isEmpty = 0;
}
void f12(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f12a(fromState, choice);
if(fromState.isEmpty == 0) f12b(fromState, choice);
else fromState.isEmpty = 0;
}
void f1(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f2(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f7(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f8(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f9b(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f10b(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f11b(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f12b(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |};
if(c1==0) rhs = fromState.head;
if(c1==1) rhs = fromState.temp1;
if(c1==2) rhs = fromState.temp2;
if(c1==3) rhs = fromState.y;
if(c1==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
rhs = fromState.next[fromState.head];}
if(c1==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
rhs = fromState.next[fromState.temp1];}
if(c1==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
rhs = fromState.next[fromState.temp2];}
if(c1==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
rhs = fromState.next[fromState.y];}
if(c2==0) fromState.head = rhs;
if(c2==1) fromState.temp1 = rhs;
if(c2==2) fromState.temp2 = rhs;
if(c2==3) fromState.y = rhs;
if(c2==4) {assert fromState.head < null;
assert fromState.head != backf;
assert fromState.head != front1f;
assert fromState.head != frontf;
fromState.next[fromState.head] = rhs;}
if(c2==5) {assert fromState.temp1 < null;
assert fromState.temp1 != backf;
assert fromState.temp1 != front1f;
assert fromState.temp1 != frontf;
fromState.next[fromState.temp1] = rhs;}
if(c2==6) {assert fromState.temp2 < null;
assert fromState.temp2 != backf;
assert fromState.temp2 != front1f;
assert fromState.temp2 != frontf;
fromState.next[fromState.temp2] = rhs;}
if(c2==7) {assert fromState.y < null;
assert fromState.y != backf;
assert fromState.y != front1f;
assert fromState.y != frontf;
fromState.next[fromState.y] = rhs;}
}
void f3(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc58(fromState, choice); return;}
if({|true|false|}) {fc59(fromState, choice); return;}
if({|true|false|}) {fc60(fromState, choice); return;}
if({|true|false|}) {fc61(fromState, choice); return;}
if({|true|false|}) {fc62(fromState, choice); return;}
if({|true|false|}) {fc63(fromState, choice); return;}
if({|true|false|}) {fc64(fromState, choice); return;}
if({|true|false|}) {fc65(fromState, choice); return;}
if({|true|false|}) {fc66(fromState, choice); return;}
if({|true|false|}) {fc67(fromState, choice); return;}
if({|true|false|}) {fc68(fromState, choice); return;}
if({|true|false|}) {fc69(fromState, choice); return;}
if({|true|false|}) {fc70(fromState, choice); return;}
if({|true|false|}) {fc71(fromState, choice); return;}
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
if({|true|false|}) {fc100(fromState, choice); return;}
if({|true|false|}) {fc101(fromState, choice); return;}
if({|true|false|}) {fc102(fromState, choice); return;}
if({|true|false|}) {fc103(fromState, choice); return;}
if({|true|false|}) {fc104(fromState, choice); return;}
if({|true|false|}) {fc105(fromState, choice); return;}
if({|true|false|}) {fc106(fromState, choice); return;}
if({|true|false|}) {fc107(fromState, choice); return;}
if({|true|false|}) {fc108(fromState, choice); return;}
if({|true|false|}) {fc109(fromState, choice); return;}
if({|true|false|}) {fc110(fromState, choice); return;}
if({|true|false|}) {fc111(fromState, choice); return;}
if({|true|false|}) {fc112(fromState, choice); return;}
if({|true|false|}) {fc113(fromState, choice); return;}
if({|true|false|}) {fc114(fromState, choice); return;}
if({|true|false|}) {fc115(fromState, choice); return;}
if({|true|false|}) {fc116(fromState, choice); return;}
if({|true|false|}) {fc117(fromState, choice); return;}
if({|true|false|}) {fc118(fromState, choice); return;}
if({|true|false|}) {fc119(fromState, choice); return;}
if({|true|false|}) {fc120(fromState, choice); return;}
if({|true|false|}) {fc121(fromState, choice); return;}
if({|true|false|}) {fc122(fromState, choice); return;}
if({|true|false|}) {fc123(fromState, choice); return;}
if({|true|false|}) {fc124(fromState, choice); return;}
if({|true|false|}) {fc125(fromState, choice); return;}
if({|true|false|}) {fc126(fromState, choice); return;}
if({|true|false|}) {fc127(fromState, choice); return;}
if({|true|false|}) {fc128(fromState, choice); return;}
if({|true|false|}) {fc129(fromState, choice); return;}
if({|true|false|}) {fc130(fromState, choice); return;}
if({|true|false|}) {fc131(fromState, choice); return;}
if({|true|false|}) {fc132(fromState, choice); return;}
if({|true|false|}) {fc133(fromState, choice); return;}
if({|true|false|}) {fc134(fromState, choice); return;}
fc135(fromState,choice); return;
}
void f9a(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc58(fromState, choice); return;}
if({|true|false|}) {fc59(fromState, choice); return;}
if({|true|false|}) {fc60(fromState, choice); return;}
if({|true|false|}) {fc61(fromState, choice); return;}
if({|true|false|}) {fc62(fromState, choice); return;}
if({|true|false|}) {fc63(fromState, choice); return;}
if({|true|false|}) {fc64(fromState, choice); return;}
if({|true|false|}) {fc65(fromState, choice); return;}
if({|true|false|}) {fc66(fromState, choice); return;}
if({|true|false|}) {fc67(fromState, choice); return;}
if({|true|false|}) {fc68(fromState, choice); return;}
if({|true|false|}) {fc69(fromState, choice); return;}
if({|true|false|}) {fc70(fromState, choice); return;}
if({|true|false|}) {fc71(fromState, choice); return;}
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
if({|true|false|}) {fc100(fromState, choice); return;}
if({|true|false|}) {fc101(fromState, choice); return;}
if({|true|false|}) {fc102(fromState, choice); return;}
if({|true|false|}) {fc103(fromState, choice); return;}
if({|true|false|}) {fc104(fromState, choice); return;}
if({|true|false|}) {fc105(fromState, choice); return;}
if({|true|false|}) {fc106(fromState, choice); return;}
if({|true|false|}) {fc107(fromState, choice); return;}
if({|true|false|}) {fc108(fromState, choice); return;}
if({|true|false|}) {fc109(fromState, choice); return;}
if({|true|false|}) {fc110(fromState, choice); return;}
if({|true|false|}) {fc111(fromState, choice); return;}
if({|true|false|}) {fc112(fromState, choice); return;}
if({|true|false|}) {fc113(fromState, choice); return;}
if({|true|false|}) {fc114(fromState, choice); return;}
if({|true|false|}) {fc115(fromState, choice); return;}
if({|true|false|}) {fc116(fromState, choice); return;}
if({|true|false|}) {fc117(fromState, choice); return;}
if({|true|false|}) {fc118(fromState, choice); return;}
if({|true|false|}) {fc119(fromState, choice); return;}
if({|true|false|}) {fc120(fromState, choice); return;}
if({|true|false|}) {fc121(fromState, choice); return;}
if({|true|false|}) {fc122(fromState, choice); return;}
if({|true|false|}) {fc123(fromState, choice); return;}
if({|true|false|}) {fc124(fromState, choice); return;}
if({|true|false|}) {fc125(fromState, choice); return;}
if({|true|false|}) {fc126(fromState, choice); return;}
if({|true|false|}) {fc127(fromState, choice); return;}
if({|true|false|}) {fc128(fromState, choice); return;}
if({|true|false|}) {fc129(fromState, choice); return;}
if({|true|false|}) {fc130(fromState, choice); return;}
if({|true|false|}) {fc131(fromState, choice); return;}
if({|true|false|}) {fc132(fromState, choice); return;}
if({|true|false|}) {fc133(fromState, choice); return;}
if({|true|false|}) {fc134(fromState, choice); return;}
fc135(fromState,choice); return;
}
void f10a(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc58(fromState, choice); return;}
if({|true|false|}) {fc59(fromState, choice); return;}
if({|true|false|}) {fc60(fromState, choice); return;}
if({|true|false|}) {fc61(fromState, choice); return;}
if({|true|false|}) {fc62(fromState, choice); return;}
if({|true|false|}) {fc63(fromState, choice); return;}
if({|true|false|}) {fc64(fromState, choice); return;}
if({|true|false|}) {fc65(fromState, choice); return;}
if({|true|false|}) {fc66(fromState, choice); return;}
if({|true|false|}) {fc67(fromState, choice); return;}
if({|true|false|}) {fc68(fromState, choice); return;}
if({|true|false|}) {fc69(fromState, choice); return;}
if({|true|false|}) {fc70(fromState, choice); return;}
if({|true|false|}) {fc71(fromState, choice); return;}
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
if({|true|false|}) {fc100(fromState, choice); return;}
if({|true|false|}) {fc101(fromState, choice); return;}
if({|true|false|}) {fc102(fromState, choice); return;}
if({|true|false|}) {fc103(fromState, choice); return;}
if({|true|false|}) {fc104(fromState, choice); return;}
if({|true|false|}) {fc105(fromState, choice); return;}
if({|true|false|}) {fc106(fromState, choice); return;}
if({|true|false|}) {fc107(fromState, choice); return;}
if({|true|false|}) {fc108(fromState, choice); return;}
if({|true|false|}) {fc109(fromState, choice); return;}
if({|true|false|}) {fc110(fromState, choice); return;}
if({|true|false|}) {fc111(fromState, choice); return;}
if({|true|false|}) {fc112(fromState, choice); return;}
if({|true|false|}) {fc113(fromState, choice); return;}
if({|true|false|}) {fc114(fromState, choice); return;}
if({|true|false|}) {fc115(fromState, choice); return;}
if({|true|false|}) {fc116(fromState, choice); return;}
if({|true|false|}) {fc117(fromState, choice); return;}
if({|true|false|}) {fc118(fromState, choice); return;}
if({|true|false|}) {fc119(fromState, choice); return;}
if({|true|false|}) {fc120(fromState, choice); return;}
if({|true|false|}) {fc121(fromState, choice); return;}
if({|true|false|}) {fc122(fromState, choice); return;}
if({|true|false|}) {fc123(fromState, choice); return;}
if({|true|false|}) {fc124(fromState, choice); return;}
if({|true|false|}) {fc125(fromState, choice); return;}
if({|true|false|}) {fc126(fromState, choice); return;}
if({|true|false|}) {fc127(fromState, choice); return;}
if({|true|false|}) {fc128(fromState, choice); return;}
if({|true|false|}) {fc129(fromState, choice); return;}
if({|true|false|}) {fc130(fromState, choice); return;}
if({|true|false|}) {fc131(fromState, choice); return;}
if({|true|false|}) {fc132(fromState, choice); return;}
if({|true|false|}) {fc133(fromState, choice); return;}
if({|true|false|}) {fc134(fromState, choice); return;}
fc135(fromState,choice); return;
}
void f11a(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc58(fromState, choice); return;}
if({|true|false|}) {fc59(fromState, choice); return;}
if({|true|false|}) {fc60(fromState, choice); return;}
if({|true|false|}) {fc61(fromState, choice); return;}
if({|true|false|}) {fc62(fromState, choice); return;}
if({|true|false|}) {fc63(fromState, choice); return;}
if({|true|false|}) {fc64(fromState, choice); return;}
if({|true|false|}) {fc65(fromState, choice); return;}
if({|true|false|}) {fc66(fromState, choice); return;}
if({|true|false|}) {fc67(fromState, choice); return;}
if({|true|false|}) {fc68(fromState, choice); return;}
if({|true|false|}) {fc69(fromState, choice); return;}
if({|true|false|}) {fc70(fromState, choice); return;}
if({|true|false|}) {fc71(fromState, choice); return;}
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
if({|true|false|}) {fc100(fromState, choice); return;}
if({|true|false|}) {fc101(fromState, choice); return;}
if({|true|false|}) {fc102(fromState, choice); return;}
if({|true|false|}) {fc103(fromState, choice); return;}
if({|true|false|}) {fc104(fromState, choice); return;}
if({|true|false|}) {fc105(fromState, choice); return;}
if({|true|false|}) {fc106(fromState, choice); return;}
if({|true|false|}) {fc107(fromState, choice); return;}
if({|true|false|}) {fc108(fromState, choice); return;}
if({|true|false|}) {fc109(fromState, choice); return;}
if({|true|false|}) {fc110(fromState, choice); return;}
if({|true|false|}) {fc111(fromState, choice); return;}
if({|true|false|}) {fc112(fromState, choice); return;}
if({|true|false|}) {fc113(fromState, choice); return;}
if({|true|false|}) {fc114(fromState, choice); return;}
if({|true|false|}) {fc115(fromState, choice); return;}
if({|true|false|}) {fc116(fromState, choice); return;}
if({|true|false|}) {fc117(fromState, choice); return;}
if({|true|false|}) {fc118(fromState, choice); return;}
if({|true|false|}) {fc119(fromState, choice); return;}
if({|true|false|}) {fc120(fromState, choice); return;}
if({|true|false|}) {fc121(fromState, choice); return;}
if({|true|false|}) {fc122(fromState, choice); return;}
if({|true|false|}) {fc123(fromState, choice); return;}
if({|true|false|}) {fc124(fromState, choice); return;}
if({|true|false|}) {fc125(fromState, choice); return;}
if({|true|false|}) {fc126(fromState, choice); return;}
if({|true|false|}) {fc127(fromState, choice); return;}
if({|true|false|}) {fc128(fromState, choice); return;}
if({|true|false|}) {fc129(fromState, choice); return;}
if({|true|false|}) {fc130(fromState, choice); return;}
if({|true|false|}) {fc131(fromState, choice); return;}
if({|true|false|}) {fc132(fromState, choice); return;}
if({|true|false|}) {fc133(fromState, choice); return;}
if({|true|false|}) {fc134(fromState, choice); return;}
fc135(fromState,choice); return;
}
void f12a(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc58(fromState, choice); return;}
if({|true|false|}) {fc59(fromState, choice); return;}
if({|true|false|}) {fc60(fromState, choice); return;}
if({|true|false|}) {fc61(fromState, choice); return;}
if({|true|false|}) {fc62(fromState, choice); return;}
if({|true|false|}) {fc63(fromState, choice); return;}
if({|true|false|}) {fc64(fromState, choice); return;}
if({|true|false|}) {fc65(fromState, choice); return;}
if({|true|false|}) {fc66(fromState, choice); return;}
if({|true|false|}) {fc67(fromState, choice); return;}
if({|true|false|}) {fc68(fromState, choice); return;}
if({|true|false|}) {fc69(fromState, choice); return;}
if({|true|false|}) {fc70(fromState, choice); return;}
if({|true|false|}) {fc71(fromState, choice); return;}
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
if({|true|false|}) {fc100(fromState, choice); return;}
if({|true|false|}) {fc101(fromState, choice); return;}
if({|true|false|}) {fc102(fromState, choice); return;}
if({|true|false|}) {fc103(fromState, choice); return;}
if({|true|false|}) {fc104(fromState, choice); return;}
if({|true|false|}) {fc105(fromState, choice); return;}
if({|true|false|}) {fc106(fromState, choice); return;}
if({|true|false|}) {fc107(fromState, choice); return;}
if({|true|false|}) {fc108(fromState, choice); return;}
if({|true|false|}) {fc109(fromState, choice); return;}
if({|true|false|}) {fc110(fromState, choice); return;}
if({|true|false|}) {fc111(fromState, choice); return;}
if({|true|false|}) {fc112(fromState, choice); return;}
if({|true|false|}) {fc113(fromState, choice); return;}
if({|true|false|}) {fc114(fromState, choice); return;}
if({|true|false|}) {fc115(fromState, choice); return;}
if({|true|false|}) {fc116(fromState, choice); return;}
if({|true|false|}) {fc117(fromState, choice); return;}
if({|true|false|}) {fc118(fromState, choice); return;}
if({|true|false|}) {fc119(fromState, choice); return;}
if({|true|false|}) {fc120(fromState, choice); return;}
if({|true|false|}) {fc121(fromState, choice); return;}
if({|true|false|}) {fc122(fromState, choice); return;}
if({|true|false|}) {fc123(fromState, choice); return;}
if({|true|false|}) {fc124(fromState, choice); return;}
if({|true|false|}) {fc125(fromState, choice); return;}
if({|true|false|}) {fc126(fromState, choice); return;}
if({|true|false|}) {fc127(fromState, choice); return;}
if({|true|false|}) {fc128(fromState, choice); return;}
if({|true|false|}) {fc129(fromState, choice); return;}
if({|true|false|}) {fc130(fromState, choice); return;}
if({|true|false|}) {fc131(fromState, choice); return;}
if({|true|false|}) {fc132(fromState, choice); return;}
if({|true|false|}) {fc133(fromState, choice); return;}
if({|true|false|}) {fc134(fromState, choice); return;}
fc135(fromState,choice); return;
}
void f6(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f3(fromState, choice);
if(fromState.isEmpty == 1) fromState.isEmpty = 0;
else fromState.isEmpty = 1; return;
}
void f4(state fromState, int choice){
assert choice < 2;
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc136(fromState, choice); return;}
if({|true|false|}) {fc137(fromState, choice); return;}
if({|true|false|}) {fc138(fromState, choice); return;}
fc139(fromState,choice); return;
}
void f5(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc140(fromState, choice); return;}
if({|true|false|}) {fc141(fromState, choice); return;}
if({|true|false|}) {fc142(fromState, choice); return;}
fc143(fromState,choice); return;
}


void loop_exit_constraint(int[5] choice) implements spec{
state initState;
initState = new state();
if(choice[0] >= 1) choice[0] = 0;
setInitialState(initState, choice[0]);
f1(initState, 0);
f2(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
if (choice[4] >= 2) choice[4] = 0;
f4(initState, choice[4]);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
if (choice[3] >= 2) choice[3] = 0;
f4(initState, choice[3]);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
f4(initState, ??);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
f4(initState, ??);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
if(initState.isEmpty) initState.isEmpty = 0;
f6(initState, 0);
f9(initState, 0);
f10(initState, 0);
f11(initState, 0);
f12(initState, 0);
assert initState.isEmpty == 0;
assertFinalState(initState, choice[0]);
}

void trace_constraint(int[5] choice) implements spec{
state initState;
initState = new state();
if(choice[0] >= 1) choice[0] = 0;
setInitialState(initState, choice[0]);
f1(initState, 0);
f2(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
if (choice[4] >= 2) choice[4] = 0;
f4(initState, choice[4]);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
if (choice[3] >= 2) choice[3] = 0;
f4(initState, choice[3]);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
if (choice[2] >= 2) choice[2] = 0;
f4(initState, choice[2]);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
f3(initState, 0);
if (choice[1] >= 2) choice[1] = 0;
f4(initState, choice[1]);
f7(initState, 0);
f8(initState, 0);
f5(initState, 0);
assertNoGhostLocation(initState);
if(initState.isEmpty) initState.isEmpty = 0;
f6(initState, 0);
f9(initState, 0);
f10(initState, 0);
f11(initState, 0);
f12(initState, 0);
assertFinalState(initState, choice[0]);
}