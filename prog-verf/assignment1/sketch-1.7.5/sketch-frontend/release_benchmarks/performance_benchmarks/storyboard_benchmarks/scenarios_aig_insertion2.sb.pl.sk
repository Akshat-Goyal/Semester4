#define anodesr 0
#define mloc 1
#define ynloc 2
#define zloc 3
#define null 4
#define undef 5

struct state{
int mother;
int z;
int yn;
int[4] f;
int[4] m;
int[4] nf;
int[4] nm;
bit isEmpty;
}

void setInitialState(state initState, int i){
initState.mother = null;
initState.z = null;
initState.yn = null;
initState.f[anodesr] = undef;
initState.f[mloc] = undef;
initState.f[ynloc] = undef;
initState.f[zloc] = undef;
initState.m[anodesr] = undef;
initState.m[mloc] = undef;
initState.m[ynloc] = undef;
initState.m[zloc] = undef;
initState.nf[anodesr] = undef;
initState.nf[mloc] = undef;
initState.nf[ynloc] = undef;
initState.nf[zloc] = undef;
initState.nm[anodesr] = undef;
initState.nm[mloc] = undef;
initState.nm[ynloc] = undef;
initState.nm[zloc] = undef;
if(i==0){
initState.mother = mloc;
initState.z = zloc;
initState.m[zloc] = mloc;
initState.yn = ynloc;
initState.f[ynloc] = mloc;
initState.m[ynloc] = anodesr;
initState.nm[ynloc] = anodesr;
}
if(i==1){
initState.mother = mloc;
initState.z = zloc;
initState.yn = ynloc;
initState.m[zloc] = mloc;
initState.f[ynloc] = anodesr;
initState.m[ynloc] = mloc;
initState.nf[ynloc] = anodesr;
initState.m[mloc] = initState.m[mloc];
}
}

void assertFinalState(state finalState, int i){
if(finalState.isEmpty == 0){
if(i==0){
assert finalState.mother == mloc && finalState.z == zloc && finalState.yn == ynloc && finalState.f[ynloc] == mloc && finalState.m[ynloc] == anodesr && finalState.m[zloc] == mloc && finalState.nf[ynloc] == zloc && finalState.nm[ynloc] == anodesr;
}
if(i==1){
assert finalState.mother == mloc && finalState.z == zloc && finalState.yn == ynloc && finalState.f[ynloc] == anodesr && finalState.m[ynloc] == mloc && finalState.m[zloc] == mloc && finalState.nm[ynloc] == zloc && finalState.nf[ynloc] == anodesr;
}
}
}

 void assertNoGhostLocation(state fromState){
}

void spec(int[5] choice){
}




//skip
void fc1(state fromState, int choice){
return;
}

//yn = mother
void fc2(state fromState, int choice){
assert fromState.mother != undef;
fromState.yn = fromState.mother;
}

//yn = z
void fc3(state fromState, int choice){
assert fromState.z != undef;
fromState.yn = fromState.z;
}

//yn = mother.f
void fc4(state fromState, int choice){
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.f[fromState.mother] != undef ;
fromState.yn = fromState.f[fromState.mother];
}

//yn = mother.m
void fc5(state fromState, int choice){
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.m[fromState.mother] != undef ;
fromState.yn = fromState.m[fromState.mother];
}

//yn = mother.nf
void fc6(state fromState, int choice){
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nf[fromState.mother] != undef ;
fromState.yn = fromState.nf[fromState.mother];
}

//yn = mother.nm
void fc7(state fromState, int choice){
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nm[fromState.mother] != undef ;
fromState.yn = fromState.nm[fromState.mother];
}

//yn = z.f
void fc8(state fromState, int choice){
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.f[fromState.z] != undef ;
fromState.yn = fromState.f[fromState.z];
}

//yn = z.m
void fc9(state fromState, int choice){
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.m[fromState.z] != undef ;
fromState.yn = fromState.m[fromState.z];
}

//yn = z.nf
void fc10(state fromState, int choice){
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nf[fromState.z] != undef ;
fromState.yn = fromState.nf[fromState.z];
}

//yn = z.nm
void fc11(state fromState, int choice){
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nm[fromState.z] != undef ;
fromState.yn = fromState.nm[fromState.z];
}

//yn = yn.f
void fc12(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.f[fromState.yn] != undef ;
fromState.yn = fromState.f[fromState.yn];
}

//yn = yn.m
void fc13(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.m[fromState.yn] != undef ;
fromState.yn = fromState.m[fromState.yn];
}

//yn = yn.nf
void fc14(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nf[fromState.yn] != undef ;
fromState.yn = fromState.nf[fromState.yn];
}

//yn = yn.nm
void fc15(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nm[fromState.yn] != undef ;
fromState.yn = fromState.nm[fromState.yn];
}

//yn.f = mother
void fc16(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != undef;
fromState.f[fromState.yn] = fromState.mother;
}

//yn.m = mother
void fc17(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != undef;
fromState.m[fromState.yn] = fromState.mother;
}

//yn.nf = mother
void fc18(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != undef;
fromState.nf[fromState.yn] = fromState.mother;
}

//yn.nm = mother
void fc19(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != undef;
fromState.nm[fromState.yn] = fromState.mother;
}

//yn.f = z
void fc20(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != undef;
fromState.f[fromState.yn] = fromState.z;
}

//yn.m = z
void fc21(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != undef;
fromState.m[fromState.yn] = fromState.z;
}

//yn.nf = z
void fc22(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != undef;
fromState.nf[fromState.yn] = fromState.z;
}

//yn.nm = z
void fc23(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != undef;
fromState.nm[fromState.yn] = fromState.z;
}

//yn.f = yn
void fc24(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != undef;
fromState.f[fromState.yn] = fromState.yn;
}

//yn.m = yn
void fc25(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != undef;
fromState.m[fromState.yn] = fromState.yn;
}

//yn.nf = yn
void fc26(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != undef;
fromState.nf[fromState.yn] = fromState.yn;
}

//yn.nm = yn
void fc27(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != undef;
fromState.nm[fromState.yn] = fromState.yn;
}

//yn.f = mother.f
void fc28(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.f[fromState.mother] != undef ;
fromState.f[fromState.yn] = fromState.f[fromState.mother];
}

//yn.f = mother.m
void fc29(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.m[fromState.mother] != undef ;
fromState.f[fromState.yn] = fromState.m[fromState.mother];
}

//yn.f = mother.nf
void fc30(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nf[fromState.mother] != undef ;
fromState.f[fromState.yn] = fromState.nf[fromState.mother];
}

//yn.f = mother.nm
void fc31(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nm[fromState.mother] != undef ;
fromState.f[fromState.yn] = fromState.nm[fromState.mother];
}

//yn.m = mother.f
void fc32(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.f[fromState.mother] != undef ;
fromState.m[fromState.yn] = fromState.f[fromState.mother];
}

//yn.m = mother.m
void fc33(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.m[fromState.mother] != undef ;
fromState.m[fromState.yn] = fromState.m[fromState.mother];
}

//yn.m = mother.nf
void fc34(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nf[fromState.mother] != undef ;
fromState.m[fromState.yn] = fromState.nf[fromState.mother];
}

//yn.m = mother.nm
void fc35(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nm[fromState.mother] != undef ;
fromState.m[fromState.yn] = fromState.nm[fromState.mother];
}

//yn.nf = mother.f
void fc36(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.f[fromState.mother] != undef ;
fromState.nf[fromState.yn] = fromState.f[fromState.mother];
}

//yn.nf = mother.m
void fc37(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.m[fromState.mother] != undef ;
fromState.nf[fromState.yn] = fromState.m[fromState.mother];
}

//yn.nf = mother.nf
void fc38(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nf[fromState.mother] != undef ;
fromState.nf[fromState.yn] = fromState.nf[fromState.mother];
}

//yn.nf = mother.nm
void fc39(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nm[fromState.mother] != undef ;
fromState.nf[fromState.yn] = fromState.nm[fromState.mother];
}

//yn.nm = mother.f
void fc40(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.f[fromState.mother] != undef ;
fromState.nm[fromState.yn] = fromState.f[fromState.mother];
}

//yn.nm = mother.m
void fc41(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.m[fromState.mother] != undef ;
fromState.nm[fromState.yn] = fromState.m[fromState.mother];
}

//yn.nm = mother.nf
void fc42(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nf[fromState.mother] != undef ;
fromState.nm[fromState.yn] = fromState.nf[fromState.mother];
}

//yn.nm = mother.nm
void fc43(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.mother != null;
assert fromState.mother != undef;
assert fromState.mother != anodesr;
assert fromState.nm[fromState.mother] != undef ;
fromState.nm[fromState.yn] = fromState.nm[fromState.mother];
}

//yn.f = z.f
void fc44(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.f[fromState.z] != undef ;
fromState.f[fromState.yn] = fromState.f[fromState.z];
}

//yn.f = z.m
void fc45(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.m[fromState.z] != undef ;
fromState.f[fromState.yn] = fromState.m[fromState.z];
}

//yn.f = z.nf
void fc46(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nf[fromState.z] != undef ;
fromState.f[fromState.yn] = fromState.nf[fromState.z];
}

//yn.f = z.nm
void fc47(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nm[fromState.z] != undef ;
fromState.f[fromState.yn] = fromState.nm[fromState.z];
}

//yn.m = z.f
void fc48(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.f[fromState.z] != undef ;
fromState.m[fromState.yn] = fromState.f[fromState.z];
}

//yn.m = z.m
void fc49(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.m[fromState.z] != undef ;
fromState.m[fromState.yn] = fromState.m[fromState.z];
}

//yn.m = z.nf
void fc50(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nf[fromState.z] != undef ;
fromState.m[fromState.yn] = fromState.nf[fromState.z];
}

//yn.m = z.nm
void fc51(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nm[fromState.z] != undef ;
fromState.m[fromState.yn] = fromState.nm[fromState.z];
}

//yn.nf = z.f
void fc52(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.f[fromState.z] != undef ;
fromState.nf[fromState.yn] = fromState.f[fromState.z];
}

//yn.nf = z.m
void fc53(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.m[fromState.z] != undef ;
fromState.nf[fromState.yn] = fromState.m[fromState.z];
}

//yn.nf = z.nf
void fc54(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nf[fromState.z] != undef ;
fromState.nf[fromState.yn] = fromState.nf[fromState.z];
}

//yn.nf = z.nm
void fc55(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nm[fromState.z] != undef ;
fromState.nf[fromState.yn] = fromState.nm[fromState.z];
}

//yn.nm = z.f
void fc56(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.f[fromState.z] != undef ;
fromState.nm[fromState.yn] = fromState.f[fromState.z];
}

//yn.nm = z.m
void fc57(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.m[fromState.z] != undef ;
fromState.nm[fromState.yn] = fromState.m[fromState.z];
}

//yn.nm = z.nf
void fc58(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nf[fromState.z] != undef ;
fromState.nm[fromState.yn] = fromState.nf[fromState.z];
}

//yn.nm = z.nm
void fc59(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.z != null;
assert fromState.z != undef;
assert fromState.z != anodesr;
assert fromState.nm[fromState.z] != undef ;
fromState.nm[fromState.yn] = fromState.nm[fromState.z];
}

//yn.f = yn.m
void fc60(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.m[fromState.yn] != undef ;
fromState.f[fromState.yn] = fromState.m[fromState.yn];
}

//yn.f = yn.nf
void fc61(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nf[fromState.yn] != undef ;
fromState.f[fromState.yn] = fromState.nf[fromState.yn];
}

//yn.f = yn.nm
void fc62(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nm[fromState.yn] != undef ;
fromState.f[fromState.yn] = fromState.nm[fromState.yn];
}

//yn.m = yn.f
void fc63(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.f[fromState.yn] != undef ;
fromState.m[fromState.yn] = fromState.f[fromState.yn];
}

//yn.m = yn.nf
void fc64(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nf[fromState.yn] != undef ;
fromState.m[fromState.yn] = fromState.nf[fromState.yn];
}

//yn.m = yn.nm
void fc65(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nm[fromState.yn] != undef ;
fromState.m[fromState.yn] = fromState.nm[fromState.yn];
}

//yn.nf = yn.f
void fc66(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.f[fromState.yn] != undef ;
fromState.nf[fromState.yn] = fromState.f[fromState.yn];
}

//yn.nf = yn.m
void fc67(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.m[fromState.yn] != undef ;
fromState.nf[fromState.yn] = fromState.m[fromState.yn];
}

//yn.nf = yn.nm
void fc68(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nm[fromState.yn] != undef ;
fromState.nf[fromState.yn] = fromState.nm[fromState.yn];
}

//yn.nm = yn.f
void fc69(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.f[fromState.yn] != undef ;
fromState.nm[fromState.yn] = fromState.f[fromState.yn];
}

//yn.nm = yn.m
void fc70(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.m[fromState.yn] != undef ;
fromState.nm[fromState.yn] = fromState.m[fromState.yn];
}

//yn.nm = yn.nf
void fc71(state fromState, int choice){
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.yn != null;
assert fromState.yn != undef;
assert fromState.yn != anodesr;
assert fromState.nf[fromState.yn] != undef ;
fromState.nm[fromState.yn] = fromState.nf[fromState.yn];
}

//true
void fc72(state fromState, int choice){
}

//false
void fc73(state fromState, int choice){
fromState.isEmpty = 1;
}

//mother != null
void fc74(state fromState, int choice){
if(fromState.mother == null)
fromState.isEmpty = 1;
}

//z != null
void fc75(state fromState, int choice){
if(fromState.z == null)
fromState.isEmpty = 1;
}

//yn != null
void fc76(state fromState, int choice){
if(fromState.yn == null)
fromState.isEmpty = 1;
}

//mother.f != z
void fc77(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.mother] == fromState.z)
fromState.isEmpty = 1;
}

//mother.m != z
void fc78(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.mother] == fromState.z)
fromState.isEmpty = 1;
}

//mother.f != yn
void fc79(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.mother] == fromState.yn)
fromState.isEmpty = 1;
}

//mother.m != yn
void fc80(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.mother] == fromState.yn)
fromState.isEmpty = 1;
}

//z.f != mother
void fc81(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.z] == fromState.mother)
fromState.isEmpty = 1;
}

//z.m != mother
void fc82(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.z] == fromState.mother)
fromState.isEmpty = 1;
}

//z.f != yn
void fc83(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.z] == fromState.yn)
fromState.isEmpty = 1;
}

//z.m != yn
void fc84(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.z] == fromState.yn)
fromState.isEmpty = 1;
}

//yn.f != mother
void fc85(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.yn] == fromState.mother)
fromState.isEmpty = 1;
}

//yn.m != mother
void fc86(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.yn] == fromState.mother)
fromState.isEmpty = 1;
}

//yn.f != z
void fc87(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.yn] == fromState.z)
fromState.isEmpty = 1;
}

//yn.m != z
void fc88(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.yn] == fromState.z)
fromState.isEmpty = 1;
}

//mother.f == z
void fc89(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.mother] != fromState.z)
fromState.isEmpty = 1;
}

//mother.m == z
void fc90(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.mother] != fromState.z)
fromState.isEmpty = 1;
}

//mother.f == yn
void fc91(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.mother] != fromState.yn)
fromState.isEmpty = 1;
}

//mother.m == yn
void fc92(state fromState, int choice){
if(fromState.mother == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.mother] != fromState.yn)
fromState.isEmpty = 1;
}

//z.f == mother
void fc93(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.z] != fromState.mother)
fromState.isEmpty = 1;
}

//z.m == mother
void fc94(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.z] != fromState.mother)
fromState.isEmpty = 1;
}

//z.f == yn
void fc95(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.z] != fromState.yn)
fromState.isEmpty = 1;
}

//z.m == yn
void fc96(state fromState, int choice){
if(fromState.z == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.z] != fromState.yn)
fromState.isEmpty = 1;
}

//yn.f == mother
void fc97(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.yn] != fromState.mother)
fromState.isEmpty = 1;
}

//yn.m == mother
void fc98(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.yn] != fromState.mother)
fromState.isEmpty = 1;
}

//yn.f == z
void fc99(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.f[fromState.yn] != fromState.z)
fromState.isEmpty = 1;
}

//yn.m == z
void fc100(state fromState, int choice){
if(fromState.yn == null){fromState.isEmpty = 1;
 return;
}
if(fromState.m[fromState.yn] != fromState.z)
fromState.isEmpty = 1;
}

// unfold mother 
void fc101(state fromState, int choice){
}

// unfold z 
void fc102(state fromState, int choice){
}

// unfold yn 
void fc103(state fromState, int choice){
}

// fold mother 
void fc104(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
}

// fold z 
void fc105(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
}

// fold yn 
void fc106(state fromState, int choice){
state prevState;
prevState = new state();
copystate(fromState, prevState);
}

void copystate(state fromState, state toState){
toState.mother = fromState.mother;
toState.z = fromState.z;
toState.yn = fromState.yn;
toState.f[anodesr] = fromState.f[anodesr];
toState.f[mloc] = fromState.f[mloc];
toState.f[ynloc] = fromState.f[ynloc];
toState.f[zloc] = fromState.f[zloc];
toState.m[anodesr] = fromState.m[anodesr];
toState.m[mloc] = fromState.m[mloc];
toState.m[ynloc] = fromState.m[ynloc];
toState.m[zloc] = fromState.m[zloc];
toState.nf[anodesr] = fromState.nf[anodesr];
toState.nf[mloc] = fromState.nf[mloc];
toState.nf[ynloc] = fromState.nf[ynloc];
toState.nf[zloc] = fromState.nf[zloc];
toState.nm[anodesr] = fromState.nm[anodesr];
toState.nm[mloc] = fromState.nm[mloc];
toState.nm[ynloc] = fromState.nm[ynloc];
toState.nm[zloc] = fromState.nm[zloc];
toState.isEmpty = fromState.isEmpty;
}
void f1(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f1a(fromState, choice);
if(fromState.isEmpty == 0) f1b(fromState, choice);
else fromState.isEmpty = 0;
}
void f2(state fromState, int choice){
if(fromState.isEmpty == 1) return;
f2a(fromState, choice);
if(fromState.isEmpty == 0) f2b(fromState, choice);
else fromState.isEmpty = 0;
}
void f1b(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |};
if(c1==0) rhs = fromState.mother;
if(c1==1) rhs = fromState.z;
if(c1==2) rhs = fromState.yn;
if(c1==3) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.f[fromState.mother];}
if(c1==4) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.m[fromState.mother];}
if(c1==5) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.nf[fromState.mother];}
if(c1==6) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.nm[fromState.mother];}
if(c1==7) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.f[fromState.z];}
if(c1==8) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.m[fromState.z];}
if(c1==9) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.nf[fromState.z];}
if(c1==10) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.nm[fromState.z];}
if(c1==11) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.f[fromState.yn];}
if(c1==12) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.m[fromState.yn];}
if(c1==13) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.nf[fromState.yn];}
if(c1==14) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.nm[fromState.yn];}
if(c2==0) fromState.yn = rhs;
if(c2==1) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.f[fromState.yn] = rhs;}
if(c2==2) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.m[fromState.yn] = rhs;}
if(c2==3) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.nf[fromState.yn] = rhs;}
if(c2==4) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.nm[fromState.yn] = rhs;}
}
void f2b(state fromState, int choice){
if(fromState.isEmpty == 1) return;
int rhs;
int c1 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |};
int c2 = {| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |};
if(c1==0) rhs = fromState.mother;
if(c1==1) rhs = fromState.z;
if(c1==2) rhs = fromState.yn;
if(c1==3) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.f[fromState.mother];}
if(c1==4) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.m[fromState.mother];}
if(c1==5) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.nf[fromState.mother];}
if(c1==6) {assert fromState.mother < null;
assert fromState.mother != anodesr;
rhs = fromState.nm[fromState.mother];}
if(c1==7) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.f[fromState.z];}
if(c1==8) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.m[fromState.z];}
if(c1==9) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.nf[fromState.z];}
if(c1==10) {assert fromState.z < null;
assert fromState.z != anodesr;
rhs = fromState.nm[fromState.z];}
if(c1==11) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.f[fromState.yn];}
if(c1==12) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.m[fromState.yn];}
if(c1==13) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.nf[fromState.yn];}
if(c1==14) {assert fromState.yn < null;
assert fromState.yn != anodesr;
rhs = fromState.nm[fromState.yn];}
if(c2==0) fromState.yn = rhs;
if(c2==1) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.f[fromState.yn] = rhs;}
if(c2==2) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.m[fromState.yn] = rhs;}
if(c2==3) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.nf[fromState.yn] = rhs;}
if(c2==4) {assert fromState.yn < null;
assert fromState.yn != anodesr;
fromState.nm[fromState.yn] = rhs;}
}
void f1a(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
fc100(fromState,choice); return;
}
void f2a(state fromState, int choice){
if(fromState.isEmpty == 1) return;
if({|true|false|}) {fc72(fromState, choice); return;}
if({|true|false|}) {fc73(fromState, choice); return;}
if({|true|false|}) {fc74(fromState, choice); return;}
if({|true|false|}) {fc75(fromState, choice); return;}
if({|true|false|}) {fc76(fromState, choice); return;}
if({|true|false|}) {fc77(fromState, choice); return;}
if({|true|false|}) {fc78(fromState, choice); return;}
if({|true|false|}) {fc79(fromState, choice); return;}
if({|true|false|}) {fc80(fromState, choice); return;}
if({|true|false|}) {fc81(fromState, choice); return;}
if({|true|false|}) {fc82(fromState, choice); return;}
if({|true|false|}) {fc83(fromState, choice); return;}
if({|true|false|}) {fc84(fromState, choice); return;}
if({|true|false|}) {fc85(fromState, choice); return;}
if({|true|false|}) {fc86(fromState, choice); return;}
if({|true|false|}) {fc87(fromState, choice); return;}
if({|true|false|}) {fc88(fromState, choice); return;}
if({|true|false|}) {fc89(fromState, choice); return;}
if({|true|false|}) {fc90(fromState, choice); return;}
if({|true|false|}) {fc91(fromState, choice); return;}
if({|true|false|}) {fc92(fromState, choice); return;}
if({|true|false|}) {fc93(fromState, choice); return;}
if({|true|false|}) {fc94(fromState, choice); return;}
if({|true|false|}) {fc95(fromState, choice); return;}
if({|true|false|}) {fc96(fromState, choice); return;}
if({|true|false|}) {fc97(fromState, choice); return;}
if({|true|false|}) {fc98(fromState, choice); return;}
if({|true|false|}) {fc99(fromState, choice); return;}
fc100(fromState,choice); return;
}


void loop_exit_constraint(int[5] choice) implements spec{
state initState;
initState = new state();
if(choice[0] >= 2) choice[0] = 0;
setInitialState(initState, choice[0]);
f1(initState, 0);
f2(initState, 0);
assert initState.isEmpty == 0;
assertFinalState(initState, choice[0]);
}

void trace_constraint(int[5] choice) implements spec{
state initState;
initState = new state();
if(choice[0] >= 2) choice[0] = 0;
setInitialState(initState, choice[0]);
f1(initState, 0);
f2(initState, 0);
assertFinalState(initState, choice[0]);
}