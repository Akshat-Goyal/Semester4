pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct Project
{
 int id;
 int finished;
}

Project Project_new (int id, int finished)
{
  Project n = new Project();
  n.id = id;
  n.finished = finished;
  return n;
}


harness void getUnfinishedProjects(int unfinishedP_sz, int projects_sz, int i_1,
                                   bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9,
                                   int project_3_7_id, int project_3_7_finished,
                                   int [MAX_LEN]  unfinishedP_id, int [MAX_LEN]  unfinishedP_finished,
                                   int [MAX_LEN]  projects_id, int [MAX_LEN]  projects_finished)

 {
 Project project_3_7 = new Project();
 project_3_7.id = project_3_7_id;
 project_3_7.finished = project_3_7_finished;
 Project [MAX_LEN]  unfinishedP;
 for (int i = 0; i < MAX_LEN; ++i) {
  unfinishedP[i] = new Project();
  unfinishedP[i].id = unfinishedP_id[i];
  unfinishedP[i].finished = unfinishedP_finished[i]; }
 
 Project [MAX_LEN]  projects;
 for (int i = 0; i < MAX_LEN; ++i) {
  projects[i] = new Project();
  projects[i].id = projects_id[i];
  projects[i].finished = projects_finished[i]; }
 
 if (true && (unfinishedP_sz >= 0 && unfinishedP_sz < MAX_LEN) && (projects_sz >=
                                                                     0 && projects_sz <
                                                                     MAX_LEN))
  {
  if (i_1 < projects_sz && invariant0(unfinishedP_sz, projects_sz, i_1, loop_0_2,
                                      unfinishedP, projects))
   {
   assert projects[i_1].finished != 0 && invariant0(unfinishedP_sz, projects_sz,
                                                    i_1 + 1, loop_0_2, append_3(
                                                                         unfinishedP,
                                                                         unfinishedP_sz,
                                                                         projects[i_1],
                                                                         unfinishedP_sz),
                                                    projects) || !(projects[i_1].
                                                                     finished !=
                                                                     0) && invariant0(
                                                                             unfinishedP_sz,
                                                                             projects_sz,
                                                                             i_1 +
                                                                               1,
                                                                             loop_0_2,
                                                                             unfinishedP,
                                                                             projects);
  }
  
  if (!(i_1 < projects_sz) && invariant0(unfinishedP_sz, projects_sz, i_1, loop_0_2,
                                         unfinishedP, projects))
   {
   assert postcondition(unfinishedP_sz, projects_sz, i_1, loop_0_2, flat_4, flat_5_8,
                        flat_6_9, project_3_7, unfinishedP, projects); }
  
  if (true)
   {
   assert invariant0(0, projects_sz, 0, false, unfinishedP, projects); }
   }
  }


bit invariant0(int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, Project [MAX_LEN]  unfinishedP,
               Project [MAX_LEN]  projects) {
 if (pred1(i_1, projects_sz, i_1, loop_0_2))
  {
  Project [MAX_LEN]  list2;
  int list2_sz;
  top_list2(projects, projects_sz, unfinishedP_sz, projects_sz, i_1, loop_0_2, unfinishedP,
            projects, list2, list2_sz);
  Project [MAX_LEN]  list3;
  int list3_sz;
  select_list3(list2, list2_sz, unfinishedP_sz, projects_sz, i_1, loop_0_2, unfinishedP,
               projects, list3, list3_sz);
  Project [MAX_LEN]  list4;
  int list4_sz;
  project_list4(list3, list3_sz, list4, list4_sz);
  return {| 
  equals_list5(unfinishedP, unfinishedP_sz, list4, list4_sz) |}; }
  else return 0; }


Project [MAX_LEN] append_0 (Project [MAX_LEN] list, int list_sz, Project e, ref int outputList_sz)
{
  Project [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Project [MAX_LEN] append_1 (Project [MAX_LEN] list, int list_sz, Project e, ref int outputList_sz)
{
  Project [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Project [MAX_LEN] append_2 (Project [MAX_LEN] list, int list_sz, Project e, ref int outputList_sz)
{
  Project [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Project [MAX_LEN] append_3 (Project [MAX_LEN] list, int list_sz, Project e, ref int outputList_sz)
{
  Project [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


bit postcondition(int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, int flat_4,
                  int flat_5_8, bit flat_6_9, Project project_3_7, Project [MAX_LEN]  unfinishedP,
                  Project [MAX_LEN]  projects) {
 Project [MAX_LEN]  list6;
 int list6_sz;
 top_list6(projects, projects_sz, unfinishedP_sz, projects_sz, i_1, loop_0_2, flat_4,
           flat_5_8, flat_6_9, project_3_7, unfinishedP, projects, list6, list6_sz);
 Project [MAX_LEN]  list7;
 int list7_sz;
 select_list7(list6, list6_sz, unfinishedP_sz, projects_sz, i_1, loop_0_2, flat_4,
              flat_5_8, flat_6_9, project_3_7, unfinishedP, projects, list7, list7_sz);
 Project [MAX_LEN]  list8;
 int list8_sz;
 project_list8(list7, list7_sz, list8, list8_sz);
 return {| 
 equals_list9(unfinishedP, unfinishedP_sz, list8, list8_sz) |}; }


generator bit pred1 (int i_1, int projects_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| projects_sz |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_1 > rightOperand;
  else if (operator == 2) return i_1 <= rightOperand;
  else if (operator == 3) return i_1 < rightOperand;
  else if (operator == 4) return i_1 == rightOperand;
  else return i_1 >= rightOperand;
}


void top_list2 (Project [MAX_LEN] projects, int projects_sz, int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, Project [MAX_LEN] unfinishedP, Project [MAX_LEN] projects, ref Project [MAX_LEN] list2, ref int list2_sz)
{
  list2_sz = {| unfinishedP_sz | projects_sz | i_1 |};
  list2 = projects[0::list2_sz];
}


void select_list3 (Project [MAX_LEN] list2, int list2_sz, int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, Project [MAX_LEN] unfinishedP, Project [MAX_LEN] projects, ref Project [MAX_LEN] list3, ref int list3_sz)
{
  list3_sz = 0;
  for (int i = 0; i < list2_sz; ++i)
  {
    if (select_list3_pred(list2[i], unfinishedP_sz, projects_sz, i_1, loop_0_2, unfinishedP, projects))
    {
      list3[list3_sz] = list2[i];
      ++list3_sz;
    }
  }
}
generator bit select_list3_pred (Project tuple, int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, Project [MAX_LEN] unfinishedP, Project [MAX_LEN] projects)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == i_1;
      else pred0 = tuple.id >= ??(2);
      bit pred1;
      int operator1 = ??;
      if (operator1 == 0) pred1 = 1;
      else if (operator1 == 1) pred1 = tuple.finished > ??(2);
      else if (operator1 == 2) pred1 = tuple.finished <= ??(2);
      else if (operator1 == 3) pred1 = tuple.finished < ??(2);
      else if (operator1 == 4) pred1 = tuple.finished == ??(2);
      else if (operator1 == 5) pred1 = tuple.finished == i_1;
      else pred1 = tuple.finished >= ??(2);
      out = out && {| pred0 | pred1 |};
    }
    return out;
  }
}


void project_list4 (Project [MAX_LEN] list3, int list3_sz, ref Project [MAX_LEN] list4, ref int list4_sz)
{
  list4_sz = list3_sz;
  list4 = list3;
}


bit equals_list5 (Project [MAX_LEN] unfinishedP, int unfinishedP_sz, ref Project [MAX_LEN] list4, ref int list4_sz)
{
  if (unfinishedP_sz != list4_sz) return 0;
  for (int i = 0; i < unfinishedP_sz; ++i)
  {
    if (unfinishedP[i].id != list4[i].id || unfinishedP[i].finished != list4[i].finished)
      return 0;
  }
  return 1;
}


void top_list6 (Project [MAX_LEN] projects, int projects_sz, int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9, Project project_3_7, Project [MAX_LEN] unfinishedP, Project [MAX_LEN] projects, ref Project [MAX_LEN] list6, ref int list6_sz)
{
  list6_sz = {| unfinishedP_sz | projects_sz | i_1 | flat_4 | flat_5_8 |};
  list6 = projects[0::list6_sz];
}


void select_list7 (Project [MAX_LEN] list6, int list6_sz, int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9, Project project_3_7, Project [MAX_LEN] unfinishedP, Project [MAX_LEN] projects, ref Project [MAX_LEN] list7, ref int list7_sz)
{
  list7_sz = 0;
  for (int i = 0; i < list6_sz; ++i)
  {
    if (select_list7_pred(list6[i], unfinishedP_sz, projects_sz, i_1, loop_0_2, flat_4, flat_5_8, flat_6_9, project_3_7, unfinishedP, projects))
    {
      list7[list7_sz] = list6[i];
      ++list7_sz;
    }
  }
}
generator bit select_list7_pred (Project tuple, int unfinishedP_sz, int projects_sz, int i_1, bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9, Project project_3_7, Project [MAX_LEN] unfinishedP, Project [MAX_LEN] projects)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == i_1;
      else if (operator0 == 6) pred0 = tuple.id == flat_4;
      else if (operator0 == 7) pred0 = tuple.id == flat_5_8;
      else if (operator0 == 8) pred0 = tuple.id == project_3_7.id;
      else if (operator0 == 9) pred0 = tuple.id == project_3_7.finished;
      else pred0 = tuple.id >= ??(2);
      bit pred1;
      int operator1 = ??;
      if (operator1 == 0) pred1 = 1;
      else if (operator1 == 1) pred1 = tuple.finished > ??(2);
      else if (operator1 == 2) pred1 = tuple.finished <= ??(2);
      else if (operator1 == 3) pred1 = tuple.finished < ??(2);
      else if (operator1 == 4) pred1 = tuple.finished == ??(2);
      else if (operator1 == 5) pred1 = tuple.finished == i_1;
      else if (operator1 == 6) pred1 = tuple.finished == flat_4;
      else if (operator1 == 7) pred1 = tuple.finished == flat_5_8;
      else if (operator1 == 8) pred1 = tuple.finished == project_3_7.id;
      else if (operator1 == 9) pred1 = tuple.finished == project_3_7.finished;
      else pred1 = tuple.finished >= ??(2);
      out = out && {| pred0 | pred1 |};
    }
    return out;
  }
}


void project_list8 (Project [MAX_LEN] list7, int list7_sz, ref Project [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = list7_sz;
  list8 = list7;
}


bit equals_list9 (Project [MAX_LEN] unfinishedP, int unfinishedP_sz, ref Project [MAX_LEN] list8, ref int list8_sz)
{
  if (unfinishedP_sz != list8_sz) return 0;
  for (int i = 0; i < unfinishedP_sz; ++i)
  {
    if (unfinishedP[i].id != list8[i].id || unfinishedP[i].finished != list8[i].finished)
      return 0;
  }
  return 1;
}

