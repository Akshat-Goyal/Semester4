pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct WilosUser
{
 int login;
}

WilosUser WilosUser_new (int login)
{
  WilosUser n = new WilosUser();
  n.login = login;
  return n;
}


harness void loginExist(int login, int login_old, int found, int wilosUsers_sz, int i_1,
                        bit loop_0_2, int flat_5, int flat_6_12, bit flat_7_13, int flat_8_14,
                        bit flat_9_15, int userLogin_4_16, bit flat_10_17, int user_3_11_login,
                        int [MAX_LEN]  wilosUsers_login)

 {
 WilosUser user_3_11 = new WilosUser();
 user_3_11.login = user_3_11_login;
 WilosUser [MAX_LEN]  wilosUsers;
 for (int i = 0; i < MAX_LEN; ++i) {
  wilosUsers[i] = new WilosUser();
  wilosUsers[i].login = wilosUsers_login[i]; }
 
 if (true && (wilosUsers_sz >= 0 && wilosUsers_sz < MAX_LEN))
  {
  if (i_1 < wilosUsers_sz && invariant0(login, login_old, found, wilosUsers_sz, i_1,
                                        loop_0_2, wilosUsers))
   {
   assert wilosUsers[i_1].login != 0 && (wilosUsers[i_1].login != login_old && (wilosUsers[i_1].
                                                                                  login ==
                                                                                  login &&
                                                                                  invariant0(
                                                                                    login,
                                                                                    login_old,
                                                                                    found +
                                                                                      1,
                                                                                    wilosUsers_sz,
                                                                                    i_1 +
                                                                                      1,
                                                                                    loop_0_2,
                                                                                    wilosUsers) ||
                                                                                  !(wilosUsers[i_1].
                                                                                      login ==
                                                                                      login) &&
                                                                                  invariant0(
                                                                                    login,
                                                                                    login_old,
                                                                                    found,
                                                                                    wilosUsers_sz,
                                                                                    i_1 +
                                                                                      1,
                                                                                    loop_0_2,
                                                                                    wilosUsers)) ||
                                           !(wilosUsers[i_1].login != login_old) &&
                                           invariant0(login, login_old, found, wilosUsers_sz,
                                                      i_1 + 1, loop_0_2, wilosUsers)) ||
     !(wilosUsers[i_1].login != 0) && invariant0(login, login_old, found, wilosUsers_sz,
                                                 i_1 + 1, loop_0_2, wilosUsers);
  }
  
  if (!(i_1 < wilosUsers_sz) && invariant0(login, login_old, found, wilosUsers_sz,
                                           i_1, loop_0_2, wilosUsers))
   {
   assert postcondition(login, login_old, found, wilosUsers_sz, i_1, loop_0_2, flat_5,
                        flat_6_12, flat_7_13, flat_8_14, flat_9_15, userLogin_4_16,
                        flat_10_17, user_3_11, wilosUsers); }
  
  if (true)
   {
   assert invariant0(login, login_old, 0, wilosUsers_sz, 0, false, wilosUsers); }
   }
  }


bit invariant0(int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2,
               WilosUser [MAX_LEN]  wilosUsers) {
 if (pred1(login, login, login_old, found, wilosUsers_sz, i_1, loop_0_2) && pred2(
                                                                              login_old,
                                                                              login,
                                                                              login_old,
                                                                              found,
                                                                              wilosUsers_sz,
                                                                              i_1,
                                                                              loop_0_2) &&
       pred3(found, login, login_old, found, wilosUsers_sz, i_1, loop_0_2) && pred4(
                                                                                i_1,
                                                                                login,
                                                                                login_old,
                                                                                found,
                                                                                wilosUsers_sz,
                                                                                i_1,
                                                                                loop_0_2))
  {
  WilosUser [MAX_LEN]  list5;
  int list5_sz;
  top_list5(wilosUsers, wilosUsers_sz, login, login_old, found, wilosUsers_sz, i_1,
            loop_0_2, wilosUsers, list5, list5_sz);
  WilosUser [MAX_LEN]  list6;
  int list6_sz;
  select_list6(list5, list5_sz, login, login_old, found, wilosUsers_sz, i_1, loop_0_2,
               wilosUsers, list6, list6_sz);
  return {| 
  found == agg_agg7(list6, list6_sz) |}; }
  else return 0; }


bit postcondition(int login, int login_old, int found, int wilosUsers_sz, int i_1,
                  bit loop_0_2, int flat_5, int flat_6_12, bit flat_7_13, int flat_8_14,
                  bit flat_9_15, int userLogin_4_16, bit flat_10_17, WilosUser user_3_11,
                  WilosUser [MAX_LEN]  wilosUsers) {
 WilosUser [MAX_LEN]  list8;
 int list8_sz;
 top_list8(wilosUsers, wilosUsers_sz, login, login_old, found, wilosUsers_sz, i_1,
           loop_0_2, flat_5, flat_6_12, flat_7_13, flat_8_14, flat_9_15, userLogin_4_16,
           flat_10_17, user_3_11, wilosUsers, list8, list8_sz);
 WilosUser [MAX_LEN]  list9;
 int list9_sz;
 select_list9(list8, list8_sz, login, login_old, found, wilosUsers_sz, i_1, loop_0_2,
              flat_5, flat_6_12, flat_7_13, flat_8_14, flat_9_15, userLogin_4_16,
              flat_10_17, user_3_11, wilosUsers, list9, list9_sz);
 return {| 
 found == agg_agg10(list9, list9_sz) |}; }


generator bit pred1 (int login, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| login_old | found | wilosUsers_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return login > rightOperand;
  else if (operator == 2) return login <= rightOperand;
  else if (operator == 3) return login < rightOperand;
  else if (operator == 4) return login == rightOperand;
  else return login >= rightOperand;
}


generator bit pred2 (int login_old, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| login | found | wilosUsers_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return login_old > rightOperand;
  else if (operator == 2) return login_old <= rightOperand;
  else if (operator == 3) return login_old < rightOperand;
  else if (operator == 4) return login_old == rightOperand;
  else return login_old >= rightOperand;
}


generator bit pred3 (int found, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| login | login_old | wilosUsers_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return found > rightOperand;
  else if (operator == 2) return found <= rightOperand;
  else if (operator == 3) return found < rightOperand;
  else if (operator == 4) return found == rightOperand;
  else return found >= rightOperand;
}


generator bit pred4 (int i_1, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| login | login_old | found | wilosUsers_sz |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_1 > rightOperand;
  else if (operator == 2) return i_1 <= rightOperand;
  else if (operator == 3) return i_1 < rightOperand;
  else if (operator == 4) return i_1 == rightOperand;
  else return i_1 >= rightOperand;
}


void top_list5 (WilosUser [MAX_LEN] wilosUsers, int wilosUsers_sz, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list5, ref int list5_sz)
{
  list5_sz = {| login | login_old | found | wilosUsers_sz | i_1 |};
  list5 = wilosUsers[0::list5_sz];
}


void select_list6 (WilosUser [MAX_LEN] list5, int list5_sz, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list6, ref int list6_sz)
{
  list6_sz = 0;
  for (int i = 0; i < list5_sz; ++i)
  {
    if (select_list6_pred(list5[i], login, login_old, found, wilosUsers_sz, i_1, loop_0_2, wilosUsers))
    {
      list6[list6_sz] = list5[i];
      ++list6_sz;
    }
  }
}
generator bit select_list6_pred (WilosUser tuple, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN] wilosUsers)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.login > ??(2);
      else if (operator0 == 2) pred0 = tuple.login <= ??(2);
      else if (operator0 == 3) pred0 = tuple.login < ??(2);
      else if (operator0 == 4) pred0 = tuple.login == ??(2);
      else if (operator0 == 5) pred0 = tuple.login == login;
      else if (operator0 == 6) pred0 = tuple.login == login_old;
      else if (operator0 == 7) pred0 = tuple.login == found;
      else if (operator0 == 8) pred0 = tuple.login == i_1;
      else pred0 = tuple.login >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg7 (WilosUser [MAX_LEN] list6, int list6_sz)
{
  int count = list6_sz;
  int max_login = 0; int sum_login = 0; int min_login = 3; int avg_login = 0;
  for (int i = 0; i < list6_sz; ++i)
  {
    if (list6[i].login > max_login)
      max_login = list6[i].login;
    if (list6[i].login < min_login)
      min_login = list6[i].login;
    sum_login += list6[i].login;
  }
  avg_login = count==0?0: (sum_login / count);
  return {| count | max_login | sum_login | min_login | avg_login |};
}


void top_list8 (WilosUser [MAX_LEN] wilosUsers, int wilosUsers_sz, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2, int flat_5, int flat_6_12, bit flat_7_13, int flat_8_14, bit flat_9_15, int userLogin_4_16, bit flat_10_17, WilosUser user_3_11, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = {| login | login_old | found | wilosUsers_sz | i_1 | flat_5 | flat_6_12 | flat_8_14 | userLogin_4_16 |};
  list8 = wilosUsers[0::list8_sz];
}


void select_list9 (WilosUser [MAX_LEN] list8, int list8_sz, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2, int flat_5, int flat_6_12, bit flat_7_13, int flat_8_14, bit flat_9_15, int userLogin_4_16, bit flat_10_17, WilosUser user_3_11, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list9, ref int list9_sz)
{
  list9_sz = 0;
  for (int i = 0; i < list8_sz; ++i)
  {
    if (select_list9_pred(list8[i], login, login_old, found, wilosUsers_sz, i_1, loop_0_2, flat_5, flat_6_12, flat_7_13, flat_8_14, flat_9_15, userLogin_4_16, flat_10_17, user_3_11, wilosUsers))
    {
      list9[list9_sz] = list8[i];
      ++list9_sz;
    }
  }
}
generator bit select_list9_pred (WilosUser tuple, int login, int login_old, int found, int wilosUsers_sz, int i_1, bit loop_0_2, int flat_5, int flat_6_12, bit flat_7_13, int flat_8_14, bit flat_9_15, int userLogin_4_16, bit flat_10_17, WilosUser user_3_11, WilosUser [MAX_LEN] wilosUsers)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.login > ??(2);
      else if (operator0 == 2) pred0 = tuple.login <= ??(2);
      else if (operator0 == 3) pred0 = tuple.login < ??(2);
      else if (operator0 == 4) pred0 = tuple.login == ??(2);
      else if (operator0 == 5) pred0 = tuple.login == login;
      else if (operator0 == 6) pred0 = tuple.login == login_old;
      else if (operator0 == 7) pred0 = tuple.login == found;
      else if (operator0 == 8) pred0 = tuple.login == i_1;
      else if (operator0 == 9) pred0 = tuple.login == flat_5;
      else if (operator0 == 10) pred0 = tuple.login == flat_6_12;
      else if (operator0 == 11) pred0 = tuple.login == flat_8_14;
      else if (operator0 == 12) pred0 = tuple.login == userLogin_4_16;
      else if (operator0 == 13) pred0 = tuple.login == user_3_11.login;
      else pred0 = tuple.login >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg10 (WilosUser [MAX_LEN] list9, int list9_sz)
{
  int count = list9_sz;
  int max_login = 0; int sum_login = 0; int min_login = 3; int avg_login = 0;
  for (int i = 0; i < list9_sz; ++i)
  {
    if (list9[i].login > max_login)
      max_login = list9[i].login;
    if (list9[i].login < min_login)
      min_login = list9[i].login;
    sum_login += list9[i].login;
  }
  avg_login = count==0?0: (sum_login / count);  
  return {| count | max_login | sum_login | min_login | avg_login |};
}

