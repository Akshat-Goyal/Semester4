pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct WilosUser
{
 int login;
}

WilosUser WilosUser_new (int login)
{
  WilosUser n = new WilosUser();
  n.login = login;
  return n;
}


harness void loginExist(int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2,
                        int flat_5, int flat_6_10, bit flat_7_11, int userLogin_4_12,
                        bit flat_8_13, int user_3_9_login, int [MAX_LEN]  wilosUsers_login)

 {
 WilosUser user_3_9 = new WilosUser();
 user_3_9.login = user_3_9_login;
 WilosUser [MAX_LEN]  wilosUsers;
 for (int i = 0; i < MAX_LEN; ++i) {
  wilosUsers[i] = new WilosUser();
  wilosUsers[i].login = wilosUsers_login[i]; }
 
 if (true && (wilosUsers_sz >= 0 && wilosUsers_sz < MAX_LEN))
  {
  if (i_1 < wilosUsers_sz && invariant0(login, found, wilosUsers_sz, i_1, loop_0_2,
                                        wilosUsers))
   {
   assert wilosUsers[i_1].login != 0 && (wilosUsers[i_1].login == login && invariant0(
                                                                             login,
                                                                             found +
                                                                               1,
                                                                             wilosUsers_sz,
                                                                             i_1 +
                                                                               1,
                                                                             loop_0_2,
                                                                             wilosUsers) ||
                                           !(wilosUsers[i_1].login == login) && invariant0(
                                                                                  login,
                                                                                  found,
                                                                                  wilosUsers_sz,
                                                                                  i_1 +
                                                                                    1,
                                                                                  loop_0_2,
                                                                                  wilosUsers)) ||
     !(wilosUsers[i_1].login != 0) && invariant0(login, found, wilosUsers_sz, i_1 +
                                                   1, loop_0_2, wilosUsers); }
  
  if (!(i_1 < wilosUsers_sz) && invariant0(login, found, wilosUsers_sz, i_1, loop_0_2,
                                           wilosUsers))
   {
   assert postcondition(login, found, wilosUsers_sz, i_1, loop_0_2, flat_5, flat_6_10,
                        flat_7_11, userLogin_4_12, flat_8_13, user_3_9, wilosUsers);
  }
  
  if (true)
   {
   assert invariant0(login, 0, wilosUsers_sz, 0, false, wilosUsers); }
   }
  }


bit invariant0(int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN]  wilosUsers) {
 if (pred1(login, login, found, wilosUsers_sz, i_1, loop_0_2) && pred2(found, login,
                                                                       found, wilosUsers_sz,
                                                                       i_1, loop_0_2) &&
       pred3(i_1, login, found, wilosUsers_sz, i_1, loop_0_2))
  {
  WilosUser [MAX_LEN]  list4;
  int list4_sz;
  top_list4(wilosUsers, wilosUsers_sz, login, found, wilosUsers_sz, i_1, loop_0_2,
            wilosUsers, list4, list4_sz);
  WilosUser [MAX_LEN]  list5;
  int list5_sz;
  select_list5(list4, list4_sz, login, found, wilosUsers_sz, i_1, loop_0_2, wilosUsers,
               list5, list5_sz);
  return {| 
  found == agg_agg6(list5, list5_sz) |}; }
  else return 0; }


bit postcondition(int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2,
                  int flat_5, int flat_6_10, bit flat_7_11, int userLogin_4_12, bit flat_8_13,
                  WilosUser user_3_9, WilosUser [MAX_LEN]  wilosUsers) {
 WilosUser [MAX_LEN]  list7;
 int list7_sz;
 top_list7(wilosUsers, wilosUsers_sz, login, found, wilosUsers_sz, i_1, loop_0_2,
           flat_5, flat_6_10, flat_7_11, userLogin_4_12, flat_8_13, user_3_9, wilosUsers,
           list7, list7_sz);
 WilosUser [MAX_LEN]  list8;
 int list8_sz;
 select_list8(list7, list7_sz, login, found, wilosUsers_sz, i_1, loop_0_2, flat_5,
              flat_6_10, flat_7_11, userLogin_4_12, flat_8_13, user_3_9, wilosUsers,
              list8, list8_sz);
 return {| 
 found == agg_agg9(list8, list8_sz) |}; }


generator bit pred1 (int login, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| found | wilosUsers_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return login > rightOperand;
  else if (operator == 2) return login <= rightOperand;
  else if (operator == 3) return login < rightOperand;
  else if (operator == 4) return login == rightOperand;
  else return login >= rightOperand;
}


generator bit pred2 (int found, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| login | wilosUsers_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return found > rightOperand;
  else if (operator == 2) return found <= rightOperand;
  else if (operator == 3) return found < rightOperand;
  else if (operator == 4) return found == rightOperand;
  else return found >= rightOperand;
}


generator bit pred3 (int i_1, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| login | found | wilosUsers_sz |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_1 > rightOperand;
  else if (operator == 2) return i_1 <= rightOperand;
  else if (operator == 3) return i_1 < rightOperand;
  else if (operator == 4) return i_1 == rightOperand;
  else return i_1 >= rightOperand;
}


void top_list4 (WilosUser [MAX_LEN] wilosUsers, int wilosUsers_sz, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list4, ref int list4_sz)
{
  list4_sz = {| login | found | wilosUsers_sz | i_1 |};
  list4 = wilosUsers[0::list4_sz];
}


void select_list5 (WilosUser [MAX_LEN] list4, int list4_sz, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list5, ref int list5_sz)
{
  list5_sz = 0;
  for (int i = 0; i < list4_sz; ++i)
  {
    if (select_list5_pred(list4[i], login, found, wilosUsers_sz, i_1, loop_0_2, wilosUsers))
    {
      list5[list5_sz] = list4[i];
      ++list5_sz;
    }
  }
}
generator bit select_list5_pred (WilosUser tuple, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, WilosUser [MAX_LEN] wilosUsers)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.login > ??(2);
      else if (operator0 == 2) pred0 = tuple.login <= ??(2);
      else if (operator0 == 3) pred0 = tuple.login < ??(2);
      else if (operator0 == 4) pred0 = tuple.login == ??(2);
      else if (operator0 == 5) pred0 = tuple.login == login;
      else if (operator0 == 6) pred0 = tuple.login == found;
      else if (operator0 == 7) pred0 = tuple.login == i_1;
      else pred0 = tuple.login >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg6 (WilosUser [MAX_LEN] list5, int list5_sz)
{
  int count = list5_sz;
  int max_login = 0; int sum_login = 0; int min_login = 3; int avg_login = 0;
  for (int i = 0; i < list5_sz; ++i)
  {
    if (list5[i].login > max_login)
      max_login = list5[i].login;
    if (list5[i].login < min_login)
      min_login = list5[i].login;
    sum_login += list5[i].login;
  }
  avg_login = count==0?0: (sum_login / count);  
  return {| count | max_login | sum_login | min_login | avg_login |};
}


void top_list7 (WilosUser [MAX_LEN] wilosUsers, int wilosUsers_sz, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, int flat_5, int flat_6_10, bit flat_7_11, int userLogin_4_12, bit flat_8_13, WilosUser user_3_9, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list7, ref int list7_sz)
{
  list7_sz = {| login | found | wilosUsers_sz | i_1 | flat_5 | flat_6_10 | userLogin_4_12 |};
  list7 = wilosUsers[0::list7_sz];
}


void select_list8 (WilosUser [MAX_LEN] list7, int list7_sz, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, int flat_5, int flat_6_10, bit flat_7_11, int userLogin_4_12, bit flat_8_13, WilosUser user_3_9, WilosUser [MAX_LEN] wilosUsers, ref WilosUser [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = 0;
  for (int i = 0; i < list7_sz; ++i)
  {
    if (select_list8_pred(list7[i], login, found, wilosUsers_sz, i_1, loop_0_2, flat_5, flat_6_10, flat_7_11, userLogin_4_12, flat_8_13, user_3_9, wilosUsers))
    {
      list8[list8_sz] = list7[i];
      ++list8_sz;
    }
  }
}
generator bit select_list8_pred (WilosUser tuple, int login, int found, int wilosUsers_sz, int i_1, bit loop_0_2, int flat_5, int flat_6_10, bit flat_7_11, int userLogin_4_12, bit flat_8_13, WilosUser user_3_9, WilosUser [MAX_LEN] wilosUsers)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.login > ??(2);
      else if (operator0 == 2) pred0 = tuple.login <= ??(2);
      else if (operator0 == 3) pred0 = tuple.login < ??(2);
      else if (operator0 == 4) pred0 = tuple.login == ??(2);
      else if (operator0 == 5) pred0 = tuple.login == login;
      else if (operator0 == 6) pred0 = tuple.login == found;
      else if (operator0 == 7) pred0 = tuple.login == i_1;
      else if (operator0 == 8) pred0 = tuple.login == flat_5;
      else if (operator0 == 9) pred0 = tuple.login == flat_6_10;
      else if (operator0 == 10) pred0 = tuple.login == userLogin_4_12;
      else if (operator0 == 11) pred0 = tuple.login == user_3_9.login;
      else pred0 = tuple.login >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg9 (WilosUser [MAX_LEN] list8, int list8_sz)
{
  int count = list8_sz;
  int max_login = 0; int sum_login = 0; int min_login = 3; int avg_login = 0;
  for (int i = 0; i < list8_sz; ++i)
  {
    if (list8[i].login > max_login)
      max_login = list8[i].login;
    if (list8[i].login < min_login)
      min_login = list8[i].login;
    sum_login += list8[i].login;
  }
  avg_login = count==0?0: (sum_login / count);  
  return {| count | max_login | sum_login | min_login | avg_login |};
}

