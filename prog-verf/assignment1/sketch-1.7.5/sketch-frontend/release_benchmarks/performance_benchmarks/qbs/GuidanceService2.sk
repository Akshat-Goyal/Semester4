pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct TaskDefinition
{
 int id;
}

TaskDefinition TaskDefinition_new (int id)
{
  TaskDefinition n = new TaskDefinition();
  n.id = id;
  return n;
}


harness void getTaskDefinitions(int tmp_sz, int tds_sz, int i_3, bit loop_0_4, int flat_1_5,
                                int flat_2_6_7_id, int [MAX_LEN]  tmp_id, int [MAX_LEN]  tds_id)

 {
 TaskDefinition flat_2_6_7 = new TaskDefinition();
 flat_2_6_7.id = flat_2_6_7_id;
 TaskDefinition [MAX_LEN]  tmp;
 for (int i = 0; i < MAX_LEN; ++i) {
  tmp[i] = new TaskDefinition();
  tmp[i].id = tmp_id[i]; }
 
 TaskDefinition [MAX_LEN]  tds;
 for (int i = 0; i < MAX_LEN; ++i) {
  tds[i] = new TaskDefinition();
  tds[i].id = tds_id[i]; }
 
 if (true && (tmp_sz >= 0 && tmp_sz < MAX_LEN) && (tds_sz >= 0 && tds_sz < MAX_LEN))
  {
  if (i_3 < tds_sz && invariant0(tmp_sz, tds_sz, i_3, loop_0_4, tmp, tds))
   {
   assert invariant0(tmp_sz, tds_sz, i_3 + 1, loop_0_4, append_1(tmp, tmp_sz, tds[i_3],
                                                                 tmp_sz), tds); }
  
  if (!(i_3 < tds_sz) && invariant0(tmp_sz, tds_sz, i_3, loop_0_4, tmp, tds))
   {
   assert postcondition(tmp_sz, tds_sz, i_3, loop_0_4, flat_1_5, flat_2_6_7, tmp,
                        tds); }
  
  if (true)
   {
   assert invariant0(0, tds_sz, 0, false, tmp, tds); }
   }
  }


bit invariant0(int tmp_sz, int tds_sz, int i_3, bit loop_0_4, TaskDefinition [MAX_LEN]  tmp,
               TaskDefinition [MAX_LEN]  tds) {
 if (pred1(i_3, tds_sz, i_3, loop_0_4))
  {
  TaskDefinition [MAX_LEN]  list2;
  int list2_sz;
  top_list2(tds, tds_sz, tmp_sz, tds_sz, i_3, loop_0_4, tmp, tds, list2, list2_sz);
  TaskDefinition [MAX_LEN]  list3;
  int list3_sz;
  select_list3(list2, list2_sz, tmp_sz, tds_sz, i_3, loop_0_4, tmp, tds, list3, list3_sz);
  TaskDefinition [MAX_LEN]  list4;
  int list4_sz;
  project_list4(list3, list3_sz, list4, list4_sz);
  return {| 
  equals_list5(tmp, tmp_sz, list4, list4_sz) |}; }
  else return 0; }


TaskDefinition [MAX_LEN] append_0 (TaskDefinition [MAX_LEN] list, int list_sz, TaskDefinition e, ref int outputList_sz)
{
  TaskDefinition [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


TaskDefinition [MAX_LEN] append_1 (TaskDefinition [MAX_LEN] list, int list_sz, TaskDefinition e, ref int outputList_sz)
{
  TaskDefinition [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


bit postcondition(int tmp_sz, int tds_sz, int i_3, bit loop_0_4, int flat_1_5, TaskDefinition flat_2_6_7,
                  TaskDefinition [MAX_LEN]  tmp, TaskDefinition [MAX_LEN]  tds) {
 TaskDefinition [MAX_LEN]  list6;
 int list6_sz;
 top_list6(tds, tds_sz, tmp_sz, tds_sz, i_3, loop_0_4, flat_1_5, flat_2_6_7, tmp,
           tds, list6, list6_sz);
 TaskDefinition [MAX_LEN]  list7;
 int list7_sz;
 select_list7(list6, list6_sz, tmp_sz, tds_sz, i_3, loop_0_4, flat_1_5, flat_2_6_7,
              tmp, tds, list7, list7_sz);
 TaskDefinition [MAX_LEN]  list8;
 int list8_sz;
 project_list8(list7, list7_sz, list8, list8_sz);
 return {| 
 equals_list9(tmp, tmp_sz, list8, list8_sz) |}; }


generator bit pred1 (int i_3, int tds_sz, int i_3, bit loop_0_4)
{
  int rightOperand = {| tds_sz |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_3 > rightOperand;
  else if (operator == 2) return i_3 <= rightOperand;
  else if (operator == 3) return i_3 < rightOperand;
  else if (operator == 4) return i_3 == rightOperand;
  else return i_3 >= rightOperand;
}


void top_list2 (TaskDefinition [MAX_LEN] tds, int tds_sz, int tmp_sz, int tds_sz, int i_3, bit loop_0_4, TaskDefinition [MAX_LEN] tmp, TaskDefinition [MAX_LEN] tds, ref TaskDefinition [MAX_LEN] list2, ref int list2_sz)
{
  list2_sz = {| tmp_sz | tds_sz | i_3 |};
  list2 = tds[0::list2_sz];
}


void select_list3 (TaskDefinition [MAX_LEN] list2, int list2_sz, int tmp_sz, int tds_sz, int i_3, bit loop_0_4, TaskDefinition [MAX_LEN] tmp, TaskDefinition [MAX_LEN] tds, ref TaskDefinition [MAX_LEN] list3, ref int list3_sz)
{
  list3_sz = 0;
  for (int i = 0; i < list2_sz; ++i)
  {
    if (select_list3_pred(list2[i], tmp_sz, tds_sz, i_3, loop_0_4, tmp, tds))
    {
      list3[list3_sz] = list2[i];
      ++list3_sz;
    }
  }
}
generator bit select_list3_pred (TaskDefinition tuple, int tmp_sz, int tds_sz, int i_3, bit loop_0_4, TaskDefinition [MAX_LEN] tmp, TaskDefinition [MAX_LEN] tds)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == i_3;
      else pred0 = tuple.id >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


void project_list4 (TaskDefinition [MAX_LEN] list3, int list3_sz, ref TaskDefinition [MAX_LEN] list4, ref int list4_sz)
{
  list4_sz = list3_sz;
  list4 = list3;
}


bit equals_list5 (TaskDefinition [MAX_LEN] tmp, int tmp_sz, ref TaskDefinition [MAX_LEN] list4, ref int list4_sz)
{
  if (tmp_sz != list4_sz) return 0;
  for (int i = 0; i < tmp_sz; ++i)
  {
    if (tmp[i].id != list4[i].id)
      return 0;
  }
  return 1;
}


void top_list6 (TaskDefinition [MAX_LEN] tds, int tds_sz, int tmp_sz, int tds_sz, int i_3, bit loop_0_4, int flat_1_5, TaskDefinition flat_2_6_7, TaskDefinition [MAX_LEN] tmp, TaskDefinition [MAX_LEN] tds, ref TaskDefinition [MAX_LEN] list6, ref int list6_sz)
{
  list6_sz = {| tmp_sz | tds_sz | i_3 | flat_1_5 |};
  list6 = tds[0::list6_sz];
}


void select_list7 (TaskDefinition [MAX_LEN] list6, int list6_sz, int tmp_sz, int tds_sz, int i_3, bit loop_0_4, int flat_1_5, TaskDefinition flat_2_6_7, TaskDefinition [MAX_LEN] tmp, TaskDefinition [MAX_LEN] tds, ref TaskDefinition [MAX_LEN] list7, ref int list7_sz)
{
  list7_sz = 0;
  for (int i = 0; i < list6_sz; ++i)
  {
    if (select_list7_pred(list6[i], tmp_sz, tds_sz, i_3, loop_0_4, flat_1_5, flat_2_6_7, tmp, tds))
    {
      list7[list7_sz] = list6[i];
      ++list7_sz;
    }
  }
}
generator bit select_list7_pred (TaskDefinition tuple, int tmp_sz, int tds_sz, int i_3, bit loop_0_4, int flat_1_5, TaskDefinition flat_2_6_7, TaskDefinition [MAX_LEN] tmp, TaskDefinition [MAX_LEN] tds)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == i_3;
      else if (operator0 == 6) pred0 = tuple.id == flat_1_5;
      else if (operator0 == 7) pred0 = tuple.id == flat_2_6_7.id;
      else pred0 = tuple.id >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


void project_list8 (TaskDefinition [MAX_LEN] list7, int list7_sz, ref TaskDefinition [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = list7_sz;
  list8 = list7;
}


bit equals_list9 (TaskDefinition [MAX_LEN] tmp, int tmp_sz, ref TaskDefinition [MAX_LEN] list8, ref int list8_sz)
{
  if (tmp_sz != list8_sz) return 0;
  for (int i = 0; i < tmp_sz; ++i)
  {
    if (tmp[i].id != list8[i].id)
      return 0;
  }
  return 1;
}

