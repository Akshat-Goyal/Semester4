pragma options "--bnd-unroll-amnt 4 --bnd-arr1d-size 2 --bnd-arr-size 2 --bnd-int-range -1  --bnd-mbits 5";

#define USEPRIOR    
#define HAVETHISREFLECTIONALREADY 0
#define XCOEFFICIENTS 
#define YCOEFFICIENTS 
#define PROVIDEDXCOEFFICIENTS 0
#define PROVIDEDYCOEFFICIENTS 0
#define XVALIDATION ( x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 )
#define YVALIDATION ( x == 0 || x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 )
#define COEFFICIENTVALIDATOR1 ( c == -6 || c == 3 || c == -3 || c == 6 )
#define COEFFICIENTVALIDATOR2 ( c == 4 || c == 2 || c == -4 || c == -2 )
#define MAXIMUMLOOPITERATIONS 4
#define MAXIMUMXCOORDINATE 8
#define MAXIMUMYCOORDINATE 6
#define HASCIRCLES 1
#define HASRECTANGLES 1
#define HASLINES 0
#define HASSOLID 0
#define HASDASHED 0
#define HASARROW 0
#define HASNOARROW 0
#define NODIAGONALS 1

#define COSTUPPERBOUND 9

#include "common.skh"
bit renderSpecification(SHAPEVARIABLES) {
  assume shapeIdentity == CIRCLE || shapeIdentity == LINE || shapeIdentity == RECTANGLE;
  if (!HASCIRCLES) assume shapeIdentity != CIRCLE;
  if (!HASRECTANGLES) assume shapeIdentity != RECTANGLE;
  if (!HASLINES) assume shapeIdentity != LINE;
  else {
    if (!HASSOLID) assume dashed;
    if (!HASDASHED) assume !dashed;
    if (!HASARROW) assume !arrow;
    if (!HASNOARROW) assume arrow;
  }
  return _c(7,3) || _r(3,2,5,6) || _c(4,5) || _c(7,1) || _c(1,5) || _c(7,5) || _c(4,3) || _r(0,4,2,6) || _r(6,0,8,6);
}

