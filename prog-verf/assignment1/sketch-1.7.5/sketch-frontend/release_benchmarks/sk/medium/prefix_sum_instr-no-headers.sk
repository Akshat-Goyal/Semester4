int N = 8;
int WARPSZ = 4;
int NWARPS = 2;
int NBANKS = 4;

pragma options "--cuda-thread-block-dim 8";


int max(int x, int y) { if (x > y) return x; else return y; }


struct BankConflictInstr {
    int bankConflictCount;
    int[NWARPS * NBANKS] bankUsageCtr;
}

serial BankConflictInstr init_bc() {
    BankConflictInstr info = new BankConflictInstr();
    info.bankConflictCount = 0;
    info.bankUsageCtr = 0;
    return info;
}

device void BCreadwrite(BankConflictInstr info, int idx) {
    int warp = threadIdx.x / WARPSZ;
    int bank = idx % NBANKS;
    int idx = warp * NBANKS + bank;
    if (idx < NWARPS * NBANKS) {
        int t = info.bankUsageCtr[idx];
        info.bankUsageCtr[idx] = t + 1;
    }
}

device void BCread(BankConflictInstr info, int idx) {
    tprint("read idx", idx);
    BCreadwrite(info, idx);
}

device void BCwrite(BankConflictInstr info, int idx) {
    tprint("write idx", idx);
    BCreadwrite(info, idx);
}

serial void incBankConflicts(BankConflictInstr info) {
    for (int bank = 0; bank < NBANKS; bank++) {
        for (int warp = 0; warp < NWARPS; warp++) {
            info.bankConflictCount = info.bankConflictCount +
                max(0, info.bankUsageCtr[warp * NBANKS + bank] - 1);
        }
    }
    info.bankUsageCtr = 0;
}

serial void BCend(BankConflictInstr info) {
    incBankConflicts(info);

}

serial int getBankConflictCount(BankConflictInstr info) {
    incBankConflicts(info);
    return info.bankConflictCount;
}

pragma instrumentation "name=BANKCONFLICTS struct=BankConflictInstr read=BCread write=BCwrite syncthreads=BCend end=BCend";



device void phi_BCread(BankConflictInstr info, int idx) {
    tprint("read idx", idx, "remapped to", phi(idx));
    BCreadwrite(info, phi(idx));
}

device void phi_BCwrite(BankConflictInstr info, int idx) {
    tprint("write idx", idx, "remapped to", phi(idx));
    BCreadwrite(info, phi(idx));
}

pragma instrumentation "name=PHI_BANKCONFLICTS struct=BankConflictInstr read=phi_BCread write=phi_BCwrite syncthreads=BCend end=BCend";





bit arrayEq(int[N] a1, int[N] a2) {
    bit rv = true;
    for (int a = 0; a < N; a++) {
        if (a1[a] != a2[a]) {
            rv = false;
        }
    }
    return rv;
}

serial int[(N)] prefixSumSpec(int[(N)] input) { int[(N)] result = input; for (int a = 0; a < (N) - 1; a++) { result[a + 1] += result[a]; } return result; }
serial int[(N)] externalPrefixSumSpec(int[(N)] input) { int[(N)] shifted = 0; shifted[1::(N)-1] = input[0::(N)-1]; return prefixSumSpec(shifted); }

int[N] segmentSumSpec(int[N] input, bit[N] flags) {
    int[N] output = 0;
    int sum = 0;
    for (int a = 0; a < N; a++) {
        if (flags[a]) {
            sum = 0;
        }
        sum += input[a];
        output[a] = sum;
    }
    return output;
}

int[N] externalSegmentSumSpec(int[N] input, bit[N] flags) {
    int[N] output = 0;
    int sum = 0;
    for (int a = 0; a < N; a++) {
        if (flags[a]) {
            sum = 0;
        }
        output[a] = sum;
        sum += input[a];
    }
    return output;
}

int[N] sumOfSegment1(int[N] input, bit[N] flags) {
    int[N] output = 0;
    int[N + 1] segSums = 0;
    int segCtr = 0;
    for (int a = 0; a < N; a++) {
        if (flags[a]) {
            segCtr += 1;
        }
        segSums[segCtr] += input[a];
    }

    segCtr = 0;
    for (int a = 0; a < N; a++) {
        if (flags[a]) {
            segCtr += 1;
        }
        output[a] = segSums[segCtr];
    }
    return output;
}



generator bit synthFunc1(bit f1) {
    bit[2] fcn = ??;
    return fcn[f1];
}

generator bit synthFunc2(bit f1, bit f2) {
    bit[2][2] fcn = ??;
    return (fcn[f1])[f2];
}

generator bit synthFunc3(bit f1, bit f2, bit f3) {
    bit[2][2][2] fcn = ??;
    return ((fcn[f1])[f2])[f3];
}

generator int oneStep_2args(int x, int y) {
    if (??) { return x + y; }
    else if (??) { return x - y; }
    else if (??) { return x * y; }
    else if (??) {
        assert (y != 0);
        return x / y;
    } else {
        assert (y != 0);
        return x % y;
    }
}

generator int fourSteps_2args(int x, int y) {
    int[3] t = { 0, x, y };
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    return t[??];
}

generator int fourSteps_3args(int x, int y, int z) {
    int[4] t = { 0, x, y, z };
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    return t[??];
}

generator int fourSteps_4args(int x, int y, int z, int w) {
    int[5] t = { 0, x, y, z, w };
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    return t[??];
}

generator int sixSteps_4args(int x, int y, int z, int w) {
    int[5] t = { 0, x, y, z, w };
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    t[??] = oneStep_2args(t[??], t[??]) % 32;
    return t[??];
}

generator int synthLinearExpr2(int x, int y) {
    return (smallSigned() * x) + (smallSigned() * y);
}

generator int synthLinearExpr3(int x, int y, int z) {
    return (smallSigned() * x) +
        (smallSigned() * y) +
        (smallSigned() * z);
}

generator int synthLinearExpr4(int x, int y, int z, int w) {
    return (smallSigned() * x) +
        (smallSigned() * y) +
        (smallSigned() * z) +
        (smallSigned() * w);
}

generator int smallSigned() {
    int val = ?? - 6;
    assert val < 9;
    return val;
}

generator int valueOrZero(int x) {
    if (??) { return 0; }
    else { return x; }
}




int domain_phi2 = N; int codomain_phi2 = 2 * N; device int phi2(int x) { int[N] fcn = ??; return fcn[x]; } device void checkInjectivityDevice_phi2(int a, int b) { if (threadIdx.x == 0) { if ((a >= 0) && (a < N) && (b >= 0) && (b < N)) { assert phi2(a) < 2 * N; if (phi2(a) == phi2(b)) { assert a == b; } } } } harness void checkInjectivity_phi2(int a, int b) { checkInjectivityDevice_phi2(a, b); }
int domain_phi3 = 2 * N; int codomain_phi3 = N; device int phi3(int x) { int[2 * N] fcn = ??; return fcn[x]; } device void checkInjectivityDevice_phi3(int a, int b) { if (threadIdx.x == 0) { if ((a >= 0) && (a < 2 * N) && (b >= 0) && (b < 2 * N)) { assert phi3(a) < N; if (phi3(a) == phi3(b)) { assert a == b; } } } } harness void checkInjectivity_phi3(int a, int b) { checkInjectivityDevice_phi3(a, b); }
device int phi(int x) { return x; }




device int phi_2d(int idx, int step) {
    int NSTEPS = 10;
    int[N * NSTEPS] fcn = ??;

    return idx;
}




device int[N] prefixSum(int[N] array_, ref int[1] nConflicts) {
    int[2 * N] array;
    parfor(out <- 0 until N) {
        array[out] = array_[phi2(out)];
    }

    BankConflictInstr bc = init_bc();
    instrument(array, bc, BANKCONFLICTS);

    int s = 1;
    int step = 1;
    while (s < N) {
        parfor (k <- 0 until (N - 2*s + 1) by (2*s)) {
            int ai = s + k - 1;
            int bi = ai + s;
            array[phi_2d(bi, step+1)] =
                array[phi_2d(ai, step)] + array[phi_2d(bi, step)];
        }

        s *= 2;
        step += 1;
    }

    while (s > 0) {
        parfor (k <- 0 until (N - 3*s + 1) by (2*s)) {
            int ai = 2 * s + k - 1;
            int bi = ai + s;
            array[phi_2d(bi, step+1)] =
                array[phi_2d(ai, step)] + array[phi_2d(bi, step)];
        }

        s /= 2;
        step += 1;
    }

    nConflicts[0] = getBankConflictCount(bc);


    int[N] result;
    parfor (out <- 0 until N) {
        result[out] = array[phi3(out)];
    }
    return result;
}



printfcn void prefix_sum_main() {


    int[N] in = {1, 1, 1, 1, 1, 1, 1, 1};

    int[1] nConflicts = 0;
    int[N] out = prefixSum(in, nConflicts);




    int[N] expected = {1, 2, 3, 4, 5, 6, 7, 8};
    tprint("output", out);

    assert arrayEq(out, expected);
}
