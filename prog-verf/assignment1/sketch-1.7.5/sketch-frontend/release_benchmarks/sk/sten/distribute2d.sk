int N;
int M;
int P;


float[N][N] ident(float[N][N] in){
	float[N][N] out;
	for(int i=0; i<N; ++i){
		for(int j=0; j<N; ++j){
			out[i][j] = in[i][j];	
		}	
	}	
	return out;
}

generator float[N][M][P] distribute(float[N][N] in){ /* automatically rewritten */
	float[N][M][P] out;
	for(int p=0; p<P; ++p){
		for(int j=0; j< {| (P | N | M) |} ; ++j){
			for(int i=0; i< {| (P | N | M) |} ; ++i){		
				assert p<P && j < M && i < N;	
				out[p][j][i] = in[ {| i*(P | M | 0 | 1) +  j*(P | M | 0| 1)  +  p*(P | M | 0| 1) |} ][ i/*{| i*(P | M | 0| 1) +  j*(P | M | 0| 1)  +  p*(P | M | 0| 1) |}*/ ];
			}
		} 	
	}	
	return out;
}

generator float[N][N] collect(float[N][M][P] in){ /* automatically rewritten */
	float[N][N] out;
	for(int j=0; j<N ;++j){
		for(int i=0; i<N; ++i){		
			out[j][i] = in[  {| (i | j)  (/ | %)  (P | M | 1)  |} ][ {| (i | j)  (/ | %)  (P | M | 1)  |} ][ {| (i | j)  (/ | %)  (P | M | 1)  |} ];			
		}			
	}	
	return out;
}

float[N][N] identSK(float[N][N] in) implements ident{
	if(M*P == N && N >= 2){
		float[N][M][P] distr = distribute(in);
		
		float[N][N] out = collect(distr);
		return out;
	}else{
		return ident(in);	
	}	
}


