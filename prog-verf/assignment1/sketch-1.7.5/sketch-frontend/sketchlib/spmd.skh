package spmd;

// need to define SPMD_MAX_BUF_LEN and SPMD_MAX_NPROC before including!

int SPMD_MAX = 1;
int SPMD_MIN = 2;
int SPMD_SUM = 3;
int SPMD_PROD = 4;

double spmdoperate(global int op, double lhs, double rhs)
{
  if (op == SPMD_MAX) {
    // if (lhs<rhs) return rhs; else return lhs;
    assert false : "MAX not supported!";
    return lhs;
  } else if (op == SPMD_MIN) {
    // if (lhs>rhs) return rhs; else return lhs;
    assert false : "MIN not supported!";
    return lhs;
  } else if (op == SPMD_SUM) {
    return lhs + rhs;
  } else if (op == SPMD_PROD) {
    return lhs * rhs;
  } else {
    assert false : "spmdoperate called using wrong op!";
  }
}

@Native("{ mpiReduce(op, size, sendbuf, recvbuf); }" )
void spmdreduce(global int op, global int size, double [size] sendbuf, ref double [size] recvbuf)
{
  global double [size] channel = {0.0};
  spmdbarrier();
  if (spmdpid == 0) {
    for (int i=0; i<size; ++i) {
      channel[i] = sendbuf[i];
    }
  } else {
    for (int i=0; i<size; ++i) {
      channel[i] = spmdoperate(op, channel[i], sendbuf[i]);
    }
  }
  spmdbarrier();
  for (int i=0; i<size; ++i) {
    recvbuf[i] = channel[i];
  }
  spmdbarrier();
}

@Native("{ mpiTransfer(size, scond, sendbuf, recipient, rcond, recvbuf); }" )
void spmdtransfer(global int size, bit scond, double [size] sendbuf, int recipient, bit rcond, ref double [size] recvbuf)
{
  global double [SPMD_MAX_BUF_LEN * SPMD_MAX_NPROC] channel;
  global bit [SPMD_MAX_NPROC] channelFilled;

  spmdbarrier();
  assert recipient>=0 && recipient<spmdnproc;
  assert size>0 && size<=SPMD_MAX_BUF_LEN;
  channelFilled[spmdpid] = 0;
  spmdbarrier();
  for (int i=0; i<size; ++i) {
    channel[recipient*SPMD_MAX_BUF_LEN + i] = sendbuf[i];
  }
  if (scond) {
    assert !channelFilled[recipient] : "two senders trying to send to the same recipient!";
    channelFilled[recipient] = 1;
  }
  spmdbarrier();
  if (rcond) {
    assert channelFilled[spmdpid] : "trying to receive but no one sent!";
    for (int i=0; i<size; ++i) {
      recvbuf[i] = channel[spmdpid*SPMD_MAX_BUF_LEN + i];
    }
  } else {
    assert !channelFilled[spmdpid] : "pending data but not receiving!";
  }
}

@Native("{ mpiAlltoall(sz, src, dst); }" )
void spmdalltoall(global int sz, double[sz*spmdnproc] src, ref double[sz*spmdnproc] dst) {
	global int size = sz*spmdnproc;
	global double[size][spmdnproc] buffer;
	spmdbarrier();
	for (int i=0; i<spmdnproc; ++i) {
		for (int j=0; j<sz; ++j) {
			buffer[i][spmdpid*sz + j] = src[i*sz + j];
		}
	}
	spmdbarrier();
	for (int k=0; k<size; ++k) {
		dst[k] = buffer[spmdpid][k];
	}
	spmdbarrier();
}

