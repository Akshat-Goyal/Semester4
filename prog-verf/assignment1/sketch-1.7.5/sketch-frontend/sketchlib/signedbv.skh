
package signed;

bit[W2] extend([int W1], bit[W1] in, int W2){
	assert W2 > W1;
	bit[W2] xx = in;
	for(int i=W1; i<W2; ++i){
        xx[i] = xx[W1-1];        
    }
    return xx;
}


bit[T] rshift([int T], bit[T] x, int k){
    //This function simulates the signed version of >>1.
    bit msb = x[T-1];
    bit[T] xx = x>>k;
    
    //since our bit-vectors are unsigned, we need to do the
    //sign extension by hand.
	for(int i=0; i<k; ++i){
    	xx[T-1-i] = msb;
    }
    return xx;
}

//The generator below describes the set of all expressions 
//involving bitwise negation, +,&,|, ^, and division by two.
generator bit[W1] expr([int W1, int k], bit[W1][k] x, int bnd){
    assert bnd > 0;
    if(??){ return ??; }
    if(??){ return x[??(3)];   }    
   
    if(??){ return rshift( expr(W1, k, x, bnd-1), ??(3)+1);   }    
    if(??){ return ~expr(W1, k, x, bnd-1); }
    if(??){ return {| expr(W1, k, x, bnd-1) (+ | ^ | & ) expr(W1, k, x, bnd-1) |}; }
}
